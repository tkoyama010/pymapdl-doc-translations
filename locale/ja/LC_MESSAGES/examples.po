# SOME DESCRIPTIVE TITLE.
# Copyright (C) (c) 2025 ANSYS, Inc. All rights reserved
# This file is distributed under the same license as the ansys-mapdl-core package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ansys-mapdl-core 0.70.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-10 00:20+0000\n"
"PO-Revision-Date: 2024-05-21 13:45+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/tkoyama010/teams/192978/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../pymapdl/doc/source/examples/devportal.rst:5
msgid "PyMAPDL Developer Portal articles"
msgstr "PyMAPDL Developer Portalの記事"

#: ../../pymapdl/doc/source/examples/devportal.rst:7
msgid ""
"In this section, you'll find informative and insightful blog articles "
"crafted by the expert developers at Ansys and published in the `Developer "
"Portal <developer_portal_>`_. Whether you're a seasoned pro or just getting "
"started with PyMAPDL, the blog articles cover a wide range of topics, from "
"best practices and tips to in-depth tutorials and real-world use cases. The "
"aim is to provide you with a valuable resource that can help you harness the"
" full potential of PyMAPDL for your engineering and simulation needs."
msgstr ""

#: ../../pymapdl/doc/source/examples/devportal.rst:16
msgid ""
"Because the Developer Portal is your hub for all things related to Ansys "
"products, if you have questions or suggestions, you can go there to connect "
"to Ansys experts and the growing Ansys developer community."
msgstr ""
"開発者ポータルは、ANSYS 製品に関連するあらゆることのハブであるため、質問や提案がある場合は、そこにアクセスして、ANSYS "
"のエキスパートや成長する Ansys 開発者コミュニティとつながることができます。"

#: ../../pymapdl/doc/source/examples/devportal.rst:24
msgid "Biomedical catheter design analysis"
msgstr "医療用カテーテルの設計解析"

#: ../../pymapdl/doc/source/examples/devportal.rst:30
msgid ""
"Analyzing biomedical catheter flexibility using PyMAPDL scripting to assess "
"its flexural rigidity in various designs."
msgstr "PyMAPDLスクリプトを用いて生体用カテーテルの柔軟性を解析し、様々なデザインにおける曲げ剛性を評価します。"

#: ../../pymapdl/doc/source/examples/devportal.rst:34
msgid ""
"Postprocessing of simplified bolted connections with the help of PyAnsys"
msgstr "PyAnsysを用いた簡略化したボルト接合部のポスト処理"

#: ../../pymapdl/doc/source/examples/devportal.rst:40
msgid ""
"Illustrating PyMAPDL's GUI possibilities for pre-tensioned bolted "
"connections, adhering to industry standards, and data extraction to Excel "
"for analysis."
msgstr "PyMAPDLのGUIによるプレテンションボルト接合、業界標準への準拠、分析のためのExcelへのデータ抽出の可能性を説明します。"

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:6
msgid "Harmonic analysis using the frequency-sweep Krylov method"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:8
msgid ""
"This example shows how to use the frequency-sweep Krylov method implemented "
"in PyMAPDL. For more information, including the theory behind this method, "
"see `Frequency-Sweep Harmonic Analysis via the Krylov Method "
"<ansys_krylov_sweep_harmonic_analysis_>`_ in the **Structural Analysis** "
"guide for Mechanical APDL."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:15
msgid "Overview"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:17
msgid ""
"This example uses the frequency-sweep Krylov method to perform a harmonic "
"analysis on a cylindrical acoustic duct and study the response of the system"
" over a range of frequencies."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:21
msgid ""
"The model is a cylindrical acoustic duct with pressure load on one end and "
"output impedance on the other end."
msgstr "モデルは、一端に圧力負荷、他端に出力インピーダンスを持つ円筒形の音響ダクトです。"

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:24
msgid "These are the main steps required:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:26
msgid ""
"Use the :func:`KrylovSolver.gensubspace() "
"<ansys.mapdl.core.krylov.KrylovSolver.gensubspace>` method to generate a "
"Krylov subspace for model reduction in the harmonic analysis."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:29
msgid ""
"Use the :func:`KrylovSolver.solve() "
"<ansys.mapdl.core.krylov.KrylovSolver.solve>` method to reduce the system of"
" equations and solve at each frequency."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:32
msgid ""
"Use the :func:`KrylovSolver.expand() "
"<ansys.mapdl.core.krylov.KrylovSolver.expand>` method to expand the reduced "
"solution back to the FE space."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:36
msgid "Perform required imports"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:37
msgid "Perform required imports and launch MAPDL."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:56
msgid "Define parameters"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:58
msgid ""
"Define some geometry parameters and analysis settings. As mentioned earlier,"
" the geometry is a cylinder defined by its radius (``cyl_r``) and its length"
" (``cyl_L``). The length of the duct is such that three complete wavelengths"
" (``no_wl``) can fit in its length and can have ten elements per wavelength."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:86
msgid "Define element type and materials"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:87
msgid ""
"Assign fluid medium (air) properties to the duct. This example uses Fluid "
"220 (``Keyopt(2)=1``) with one degree of freedom per node (pressure), with "
"no FSI interface in the element."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:102
msgid "Define geometry"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:104
msgid ""
"Create a cylinder of the required dimensions and split it into four segments"
" for uniform generation of the mesh in each segment."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:137
msgid "Create mesh"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:139
msgid "Create the mesh and plot the FE model."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:151
msgid ""
"To ensure that the volume is divided in ``tot_elem`` across its length, "
"assign a length element size constraint to the longitudinal lines."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:180
msgid "Define boundary conditions"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:182
msgid ""
"Apply pressure load on one end and output impedance on other end of the "
"acoustic duct."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:209
msgid "Perform modal analysis"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:211
msgid "Get the first 10 natural frequency modes of the acoustic duct."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:228
msgid "The first ten modes are:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:231
msgid "Mode number"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:231
msgid "Frequency (Hz)"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:233
msgid "1"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:233
msgid "83.33"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:235
msgid "2"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:235
msgid "250.00"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:237
msgid "3"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:237
msgid "416.67"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:239
msgid "4"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:239
msgid "583.34"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:241
msgid "5"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:241
msgid "750.03"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:243
msgid "6"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:243
msgid "916.74"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:245
msgid "7"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:245
msgid "1083.49"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:247
msgid "8"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:247
msgid "1250.32"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:249
msgid "9"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:249
msgid "1417.26"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:251
msgid "10"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:251
msgid "1584.36"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:257
msgid "Run harmonic analysis using Krylov method"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:258
msgid ""
"Perform the following steps to run the harmonic analysis using the "
"frequency-sweep Krylov method."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:261
msgid ""
"**Step 1**: Generate FULL file and initialize the ``Krylov`` class object."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:277
msgid ""
"**Step 2**: Generate a Krylov subspace of size/dimension 10 at frequency 500"
" Hz for model reduction."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:285
msgid "Obtain the shape of the generated subspace."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:293
msgid ""
"**Step 3**: Reduce the system of equations and solve at each frequency from "
"0 Hz to 1000 Hz with ramped loading."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:300
msgid "Obtain the shape of the reduced solution generated."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:308
msgid "**Step 4**: Expand the reduced solution back to the FE space."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:315
msgid "Plot the pressure distribution as a function of length"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:317
msgid ""
"Plot the pressure distribution over the length of the duct on nodes where Y,"
" Z coordinates are zero."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:329
msgid ""
"Load the last result substep to get the pressure for each of the selected "
"nodes."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:355
msgid "Sort the results according to the X coordinate."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:361
msgid "Plot the calculated data."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:383
msgid "Plot the frequency response function"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:385
msgid ""
"Plot the frequency response function of any node along the length of the "
"cylindrical duct. This code plots the frequency response function for a node"
" along 0.2 in the X direction of the duct."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:394
msgid ""
"Get the response of the system for the selected node over a range of "
"frequencies, such as 0 to 1000 Hz."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:412
msgid "Sort the results."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/Krylov/krylov_example.rst:420
msgid "Plot the frequency response function for the selected node."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:5
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:24
msgid "I-Beam Analysis with Automated Report Generation"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:7
msgid ""
"This comprehensive example demonstrates how to perform a complete structural"
" analysis of an I-beam using PyMAPDL and automatically generate detailed "
"engineering reports. The example showcases advanced PyMAPDL capabilities "
"including parameterized modeling, result extraction, and automated "
"documentation generation."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:12
msgid "**What this example demonstrates:**"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:14
msgid "Parameterized I-beam geometry creation"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:15
msgid "Material property definition and assignment"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:16
msgid "Fully constrained beam at both ends"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:17
msgid "Distributed load applied using nodal forces"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:18
msgid "Comprehensive result extraction and postprocessing"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:19
msgid "Automated report generation in Markdown and Word formats"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:20
msgid "Analytical verification of finite element results"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:23
#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:15
#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:81
#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:11
msgid "Introduction"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:25
msgid ""
"Engineering analysis often requires not only obtaining results but also "
"documenting the analysis process, assumptions, and findings in a "
"professional report format. This example shows how PyMAPDL can be used to "
"create a complete analysis workflow that includes automated report "
"generation."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:30
msgid ""
"The analysis focuses on a fully constrained I-beam subjected to a uniformly "
"distributed load, a fundamental structural engineering problem. The results "
"are verified against analytical solutions and presented in professional "
"report formats."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:35
msgid "Problem Definition"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:37
msgid "Analyze a I-beam with the following characteristics:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:39
msgid "**Geometry:**"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:41
msgid "Length: 5.0 meters"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:42
msgid "I-section with typical structural steel proportions"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:43
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:39
msgid "Fully constrained at both ends"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:45
msgid "**Loading:**"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:47
msgid "Uniformly distributed load of 50 kN/m (downward)"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:48
msgid "Static analysis (no dynamic effects)"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:50
msgid "**Material:**"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:52
msgid "Structural steel (S355 grade)"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:53
msgid "Linear elastic behavior assumed"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:55
msgid "**Objectives:**"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:57
msgid "Determine maximum displacement and location"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:58
msgid "Calculate maximum bending stress"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:59
msgid "Verify safety against yielding"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:60
msgid "Generate comprehensive documentation"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:63
msgid "Model Setup and Parametrization"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:65
msgid ""
"The example begins by defining all analysis parameters in dictionaries for "
"easy modification and reuse:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:74
msgid "This parameterized approach allows for:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:76
msgid "Easy modification of beam dimensions"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:77
msgid "Material property changes"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:78
msgid "Load case variations"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:79
msgid "Design optimization studies"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:82
msgid "Preprocessing - Geometry and Meshing"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:85
msgid "Element Type Selection"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:87
msgid "The analysis uses BEAM188 elements, which are:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:89
msgid "3D linear finite strain beam elements"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:90
msgid "Suitable for thin to moderately thick beam structures"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:91
msgid "Capable of handling large deflection effects (if needed)"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:92
msgid "Provide comprehensive stress output"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:101
msgid "Cross-Section Definition"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:103
msgid "The I-beam cross-section is defined using PyMAPDL's section commands:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:111
msgid "The ``SECDATA`` command defines the I-beam geometry where:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:113
msgid "First two parameters: top and bottom flange widths"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:114
msgid "Third parameter: total beam height"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:115
msgid "Fourth and fifth parameters: flange thicknesses"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:116
msgid "Sixth parameter: web thickness"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:119
msgid "Node and Element Generation"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:121
msgid "Nodes are created along the beam length with uniform spacing:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:129
msgid ""
"The mesh uses 20 elements along the beam length, providing sufficient "
"resolution for accurate results while maintaining computational efficiency."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:133
msgid "Boundary Conditions and Loading"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:136
msgid "Fully Constrained End Conditions"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:138
msgid "Fully clamped boundary conditions on the ends are implemented as:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:147
msgid "Distributed Load Application"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:149
msgid "The uniformly distributed load is applied as equivalent nodal forces:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:157
msgid "This approach:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:159
msgid "Converts the continuous load to discrete nodal forces"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:160
msgid "Maintains load equilibrium"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:161
msgid "Provides accurate representation of the distributed loading"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:163
msgid ""
"Alternatively, the load can be applied using the ``SFBEAM`` command for "
"surface loads on BEAM and PIPE elements."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:166
msgid "Solution Process"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:168
msgid "The static structural solution is configured and executed:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:176
msgid "The solution uses:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:178
msgid "Static analysis type (no time-dependent effects)"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:179
msgid "Linear analysis (small deflection theory)"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:180
msgid "Direct solver for optimal accuracy"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:183
msgid "Post-Processing and Result Extraction"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:186
msgid "Displacement Results"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:188
msgid ""
"The maximum displacement is extracted using the `post_processing` module:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:197
msgid "Moment Results"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:199
msgid ""
"The moment at both nodes are extracted using ``ETABLE`` command, with "
"``SMISC`` items:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:208
msgid "Bending Stress Results"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:210
msgid "Again ``ETABLE`` is used to retrieve MAPDL values:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:219
msgid "Bending Strain Results"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:228
msgid "Report Generation Features"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:231
msgid "Markdown Report"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:233
msgid "The Markdown report includes:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:235
msgid "Executive summary with key results"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:236
msgid "Detailed model description with parameter tables"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:237
msgid "Comprehensive results presentation"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:238
msgid "Analytical verification section"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:239
msgid "Professional formatting with tables and equations"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:247
msgid "Word Document Report"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:249
msgid "The Word document report provides:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:251
msgid "Professional document formatting"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:252
msgid "Tables for organized data presentation"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:253
msgid "Structured sections and headings"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:254
msgid "Executive summary format"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:261
msgid "**Note:** Word report generation requires the ``python-docx`` package:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:268
msgid "Plot Generation"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:270
msgid "The example includes the capability to generate analysis plots:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:277
msgid "Generated plots include:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:279
msgid "Displacement contours showing deformed shape"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:280
msgid "Stress contours highlighting critical regions"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:281
msgid "Node and element plots for model verification"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:284
msgid "Running the Example"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:287
msgid "Basic Execution"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:289
msgid "To run the complete analysis and generate reports:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:298
msgid "Or execute the script directly:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:305
msgid "Output Files"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:307
msgid ""
"The analysis generates several output files in the ``beam_analysis_output`` "
"directory:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:309
msgid "``ibeam_analysis_report.md`` - Markdown report"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:310
msgid "``ibeam_analysis_report.docx`` - Word document"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:311
msgid "``displacement_plot.png`` - Displacement visualization"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:312
msgid "``stress_plot.png`` - Stress visualization"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:315
msgid "Customization Options"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:318
msgid "Parameter Modification"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:320
msgid "Easily modify analysis parameters by changing the dictionaries:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:335
msgid "Multiple Load Cases"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:337
msgid "The framework can be extended for multiple load cases:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:352
msgid "This parameterized approach enables design optimization studies."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:356
msgid "Advanced Analysis Options"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:358
msgid "The example can be extended for more sophisticated analyses."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:361
msgid "Nonlinear Analysis"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:372
msgid "Dynamic Analysis"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:382
msgid "Additional Report Features"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:385
msgid "PDF Generation"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:387
msgid ""
"If you install `pandoc <https://pandoc.org>`_, you can convert the Markdown "
"report to a PDF file as follows:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:399
msgid "Excel Export"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:401
msgid ""
"You can export results to Excel using `pandas`. This is quite useful when "
"reporting parametric studies:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:442
msgid "Email Reports"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:444
msgid "Using Python you can send the generated reports via email:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:542
msgid "Conclusion"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:544
msgid ""
"This example demonstrates a complete PyMAPDL workflow that goes beyond "
"simple analysis to include professional documentation and reporting. It "
"provides a foundation for developing robust engineering analysis tools and "
"workflows using PyMAPDL by combining:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:549
msgid "Parameterized modeling"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:550
msgid "Comprehensive result extraction"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:551
msgid "Analytical verification"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:552
msgid "Automated report generation"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:554
msgid ""
"The approach shown here can be adapted for various structural analysis "
"problems and extended with additional features as needed for specific "
"engineering applications."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:558
#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:431
msgid "References"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:560
msgid "PyMAPDL Documentation: https://mapdl.docs.pyansys.com/"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:561
msgid "Ansys Mechanical APDL Element Reference"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:564
#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:238
#: ../../pymapdl/doc/source/examples/extended_examples/gui/executable.rst:153
msgid "Additional files"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:566
msgid ""
":download:`beam_with_report.py <ref_beam_report_example_>`: Complete Python "
"script."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:568
msgid "Examples of the generated report files are:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:570
msgid ""
":download:`ibeam_analysis_report.md <ibeam_analysis_report.md>`: Markdown "
"report file."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/beam_analysis_with_reporting/beam_analysis_report.rst:571
msgid ""
":download:`ibeam_analysis_report.docx <ibeam_analysis_report.docx>`: Word "
"document file."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/dash/dash_example.rst:4
msgid "Use Dash to build a PyMAPDL web app"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/dash/dash_example.rst:6
msgid ""
"This example shows how to use Dash to build a web app for a simple FEA "
"problem."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/dash/dash_example.rst:8
msgid ""
"Dash is a low-code framework for building data apps which are rendered in a "
"web browser. For Dash documentation, refer to: https://dash.plotly.com/"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/dash/dash_example.rst:13
msgid "Required modules"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/dash/dash_example.rst:15
msgid "For this example, install modules as needed:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/dash/dash_example.rst:17
msgid "`dash <dash_>`_"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/dash/dash_example.rst:18
msgid "`dash_bootstrap_components <dash_bootstrap_components_>`_"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/dash/dash_example.rst:19
msgid "`plotly.express <plotly_express_>`_"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/dash/dash_example.rst:20
msgid "`webbrowser <webbrowser_library_>`_"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/dash/dash_example.rst:21
msgid "`pandas <pandas_org_>`_"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/dash/dash_example.rst:25
msgid "Structure"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/dash/dash_example.rst:27
msgid "Description page. Read the problem statement"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/dash/dash_example.rst:29
msgid ""
"Simulation Page. Allow to change the input values, solve the problem and "
"plot the results."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/dash/dash_example.rst:31
msgid "Data Page."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/dash/dash_example.rst:32
msgid "Allow to plot data in a table and graph"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/dash/dash_example.rst:36
msgid "Usage"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/dash/dash_example.rst:38
msgid ""
"Download the zip file from the link below and unzip it to a folder. Run the "
"Python file ``BimetallicStrip.py`` which launches the app in your default "
"browser."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/dash/dash_example.rst:41
msgid ":download:`dash extra files <dash-vm35.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/ex_01-gmsh_example/ex_01-gmsh_example.rst:5
msgid "Gmsh example"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/ex_01-gmsh_example/ex_01-gmsh_example.rst:8
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:30
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:34
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/exhaust_manifold_thermal_stress.rst:30
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:30
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:32
msgid "Objective"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/ex_01-gmsh_example/ex_01-gmsh_example.rst:9
msgid ""
"This example demonstrate the interoperability of PyAnsys with Gmsh, a very "
"well known open source Python meshing library. For more information, visit "
"the Gmsh website: `Gmsh <gmsh_>`_."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/ex_01-gmsh_example/ex_01-gmsh_example.rst:13
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:33
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:31
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:35
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/slashmap_cfx_mapping.rst:31
msgid "Description"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/ex_01-gmsh_example/ex_01-gmsh_example.rst:14
msgid ""
"Gmsh is used to import an external geometry file in STL format. The `PyMAPDL"
" Reader <legacy_reader_docs_>`_ library is then used to import the geometry "
"into PyMAPDL."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/ex_01-gmsh_example/ex_01-gmsh_example.rst:17
msgid "This example makes use of these files:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/ex_01-gmsh_example/ex_01-gmsh_example.rst:19
msgid ""
"``gmsh_converter.py``: Loads a STEP file, meshes it, and saves it as a Gmsh "
"file."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/ex_01-gmsh_example/ex_01-gmsh_example.rst:20
msgid ""
"``mesh_converter``: Converts the MSH file into an Ansys CDB database format "
"file (archive file)."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/ex_01-gmsh_example/ex_01-gmsh_example.rst:21
msgid ""
"``modal_analysis.py``: Imports the CDB database, sets up the modal analysis,"
" and runs it. It also shows an animation of the first mode and saves it to a"
" GIF file named ``animation.gif``."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/ex_01-gmsh_example/ex_01-gmsh_example.rst:27
msgid "Requirements"
msgstr "必要条件"

#: ../../pymapdl/doc/source/examples/extended_examples/ex_01-gmsh_example/ex_01-gmsh_example.rst:28
msgid "You must have Gmsh installed. You can install it using ``pip``:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/ex_01-gmsh_example/ex_01-gmsh_example.rst:36
msgid "Source code"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/ex_01-gmsh_example/ex_01-gmsh_example.rst:39
msgid "``gmsh_generator.py`` file"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/ex_01-gmsh_example/ex_01-gmsh_example.rst:47
msgid "``mesh_converter.py`` file"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/ex_01-gmsh_example/ex_01-gmsh_example.rst:55
msgid "``modal_analysis.py`` file"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/ex_01-gmsh_example/ex_01-gmsh_example.rst:64
msgid "Notes"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/ex_01-gmsh_example/ex_01-gmsh_example.rst:66
msgid ""
"You should copy all the files in a separate directory to make running the "
"example easier."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:7
msgid "Create your own Python command-line app"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:9
msgid ""
"This example shows how to create your own command-line app in Python that "
"uses PyMAPDL to perform some simulations. This usage is quite convenient "
"when automating workflows. You can build different PyMAPDL apps that can be "
"called from the command line with different arguments."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:17
msgid "Simulation configuration"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:19
msgid ""
"The :download:`rotor.py <rotor.py>` script implements a command-line "
"interface for calculating the first natural frequency of a simplified rotor "
"with a given number of blades and a specific material configuration."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:29
msgid "Convert a script to a Python app"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:31
msgid ""
"To use the preceding script from a terminal, you must convert it to a Python"
" app. In this case, the app uses a command-line interface to provide the "
"options to PyMAPDL."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:35
msgid ""
"To specify the options, the package `Click "
"<https://click.palletsprojects.com>`_ is used. Another suitable package is "
"the builtin package `argparse "
"<https://docs.python.org/3/library/argparse.html>`_."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:40
msgid ""
"First, you must convert the script to a function. You can accomplish this by"
" using the input arguments in a function signature."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:44
msgid "In this case, the following arguments must be specified:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:46
msgid "``n_blades``: Number of blades."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:47
msgid "``blade_length``: Length of each blade."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:48
msgid "``elastic_modulus``: Elastic modulus of the material."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:49
msgid "``density``: Density of the material."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:51
msgid "You can then define the function like this:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:56
msgid ""
"You introduce the values of these parameters by adding this code immediately"
" before the function definition:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:63
msgid ""
"Because the *Click* package uses decorators (``@click.XXX``, you must "
"specify *Click* commands immediately before the function definition."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:66
msgid ""
"In addition, you must add the call to the newly created function at the end "
"of the script:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:73
msgid "This ensure the new function is called when the script is executed."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:75
msgid "Now you can call your function from the command line using this code:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:89
msgid ""
"The preceding code sets the number of blades to ``8``. This code shows how "
"you can input other arguments:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:105
msgid "Convert the app to an executable file"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:107
msgid ""
"Using the Python library `PyInstaller <pyinstaller_>`_, you can convert the "
"app to an executable file. However, for the app to work, you must add the "
"``VERSION`` file that specifies the PyMAPDL version to the executable file."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:110
msgid ""
"Start by generating the `specification file <pyinstaller_spec_files_>`_ for "
"the app. At the root of the project, execute the following command:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:118
msgid "PyInstaller provides two modes for generating executables:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:120
msgid ""
"``onedir`` (default): This mode generates a folder that includes the "
"executable file along with its dependencies."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:121
msgid ""
"``onefile``: This mode has PyInstaller generate a single executable file."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:123
msgid ""
"To generate the executable file in ``onefile`` mode, include the argument "
"``--onefile`` in the command:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:129
msgid ""
"Then, add the link to the ``VERSION`` file from the PyMAPDL package in the "
"``cli_rotor.spec`` file:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:138
msgid "Generate the executable file from the ``cli_rotor.spec`` file:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:145
msgid ""
"The output is an executable file named ``cli_rotor.exe`` in the directory "
"``./dist/cli_rotor``."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:149
msgid "Advanced usage"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:151
msgid ""
"You can use these concepts to make Python create files with specific results"
" that you can later use in other apps."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:155
msgid "Postprocess images using ImageMagick"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:157
msgid ""
"To create an image with PyMAPDL, you can add this code to the ``rotor.py`` "
"file:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:167
msgid ""
"To add a frame, you can use `ImageMagick <https://www.imagemagick.org>`_:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:174
msgid "You can also use Imagemagick to add a watermark:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:181
msgid "Here are descriptions for values used in the preceding code:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:183
msgid ""
"``-gravity``: Location of the watermark in case the watermark is smaller "
"than the image."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:185
msgid "``COMPOSITE``: Path to the ImageMagick ``composite`` function."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:186
msgid "``watermark.png``: Name of the PNG file with the watermark image."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:187
msgid ""
"``volumes_with_watermark.jpg``: Name of the JPG file to save the output to."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:189
msgid "The final results should look like the ones in this image:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:194
msgid "Volumes image with watermark"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:198
msgid "Usage on the cloud"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:200
msgid "Using these concepts, you can deploy your own apps to the cloud."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:202
msgid ""
"For example, you can execute the previous example on a GitHub runner using "
"this approach (non-tested):"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:240
msgid "You can use these links to download the example files:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:242
msgid "Original :download:`rotor.py <rotor.py>` script"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/executable/executable.rst:243
msgid "App :download:`cli_rotor.py <cli_rotor.py>` script"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/gui/executable.rst:5
msgid "Create a GUI app in Python with PySide6"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/gui/executable.rst:7
msgid ""
"This example shows how to create a graphical user interface (GUI) app in "
"Python that uses PyMAPDL to compute the deflection of a square beam."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/gui/executable.rst:10
msgid "Application layout"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/gui/executable.rst:12
msgid ""
"The :download:`gui_app.py <gui_app.py>` script launches a graphical app "
"using PySide6."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/gui/executable.rst:14
msgid ""
"The **Preprocessing** tab contains input fields for Poisson's ratio, Young "
"modulus, beam length, and a number of simulation nodes."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/gui/executable.rst:18
msgid "The **Postprocessing** tab shows the deformation plot."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/gui/executable.rst:24
msgid "Add a PyVista plotting frame to the window"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/gui/executable.rst:26
msgid ""
"Start by importing the `QtInteractor "
"<https://qtdocs.pyvista.org/api_reference.html#qtinteractor>`_ class from "
"the `pyvistaqt <https://github.com/pyvista/pyvistaqt>`_ package and the "
":class:`MapdlTheme <ansys.mapdl.core.plotting.theme.MapdlTheme>` class from "
"the `ansys-mapdl-core <pymapdl_repo_>`_ package:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/gui/executable.rst:36
msgid "Then, add a plotter on the first tab:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/gui/executable.rst:50
msgid "Add another plotter on the second tab:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/gui/executable.rst:59
msgid "The plotter can be updated with a PyMAPDL plotter object as follow:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/gui/executable.rst:73
msgid ""
"Finally, make sure to correctly close the VTK widgets when closing the app:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/gui/executable.rst:83
msgid "Launch an MAPDL instance in your window"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/gui/executable.rst:85
msgid ""
"In this example, the MAPDL instance is launched outside the ``MainWindow`` "
"object, and it passed to it as an argument."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/gui/executable.rst:97
msgid ""
"The ``MainWindow`` object stores the :class:`Mapdl "
"<ansys.mapdl.core.mapdl.MapdlBase>` object internally:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/gui/executable.rst:109
msgid "Simulation setup"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/gui/executable.rst:111
msgid "The model is built in ``build_model`` method:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/gui/executable.rst:116
msgid "And solved in ``run_solver``:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/gui/executable.rst:123
msgid "Develop the logic"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/gui/executable.rst:125
msgid "Connect each button to a function that contains the logic:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/gui/executable.rst:143
msgid "Run the app"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/gui/executable.rst:145
msgid "You can run the app as a normal python script:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/gui/executable.rst:155
msgid "The example files can be downloaded using this link:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/gui/executable.rst:157
msgid ":download:`gui_app.py <gui_app.py>`: Complete Python script."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/gui/executable.rst:158
msgid ""
":download:`requirements.txt <requirements.txt>`: Python libraries "
"requirements."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:5
msgid "Genetic algorithms and PyMAPDL"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:7
msgid ""
"This example shows how to use PyMAPDL in an HPC cluster to take advantage of"
" multiple MAPDL instances to calculate each of the genetic algorithm "
"population solutions. To manage multiple MAPDL instances, you should use the"
" :class:`~ansys.mapdl.core.pool.MapdlPool` class, which allows you to run "
"multiple jobs in the background."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:17
msgid ""
"Genetic algorithms are optimization techniques inspired by the principles of"
" natural selection and genetics. They are used to find solutions to complex "
"problems by mimicking the process of natural selection to evolve potential "
"solutions over successive generations. In a genetic algorithm, a population "
"of candidate solutions (chromosomes) undergoes a series of operations, "
"including selection, crossover, and mutation, to produce new generations of "
"solutions. The fittest chromosomes, which best satisfy the problem "
"constraints and objectives, are more likely to be selected for reproduction,"
" thus gradually improving the overall quality of solutions over time. "
"Genetic algorithms are particularly useful for solving problems where "
"traditional methods are impractical or inefficient, such as optimization, "
"search, and machine learning tasks. They find applications in various "
"fields, including engineering, economics, biology, and computer science."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:30
msgid "Problem definition"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:32
msgid ""
"This example shows how to use a generic algorithm to calculate the force "
"required for a double-clamped beam to deform a specific amount in its "
"center."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:36
msgid ""
"The beam model is the same as :ref:`ref_mapdl_beam`. It is made of "
"``BEAM188`` elements that span for 2.2 meters, and it fully clamped at both "
"ends."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:40
msgid ""
"The PyMAPDL beam model is defined in the ``calculate_beam()`` function as "
"follows:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:47
msgid ""
"This function returns the control parameter for the model, which is the "
"displacement at the Z-direction on the node 12 (``UZ_node_12``)."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:51
msgid "MAPDL pool setup"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:53
msgid ""
"Genetic algorithms are expensive in regard to the amount of calculations "
"needed to reach an optimal solution. As shown earlier, many simulations must"
" be performed to select, cross over, and mutate all the chromosomes across "
"all the populations. For this reason, to speed up the process, it is "
"desirable to have as many MAPDL instances as possible so that each one can "
"calculate one chromosome fit function."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:57
msgid ""
"To manage multiple MAPDL instances, the best approach is to use the "
":class:`~ansys.mapdl.core.pool.MapdlPool` class."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:66
msgid "Deflection target"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:68
msgid ""
"Because this is a demonstration example, the target displacement is "
"calculated using the beam function itself with a force of 22840 "
":math:`N/cm^2`."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:78
msgid "Genetic algorithm model"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:83
msgid ""
"You use the `PyGAD <pygad_docs_>`_ library to configure the genetic "
"algorithm."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:87
msgid ""
"PyGAD is an open source Python library for building the genetic algorithm "
"and optimizing machine learning algorithms."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:89
msgid ""
"PyGAD supports different types of crossover, mutation, and parent selection "
"operators. PyGAD allows different types of problems to be optimized using "
"the genetic algorithm by customizing the fitness function. It works with "
"both single-objective and multi-objective optimization problems."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:94
msgid ""
"From PyGAD - Python Genetic Algorithm - "
"https://pygad.readthedocs.io/en/latest/"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:98
msgid "Configuration"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:100
msgid "To configure the genetic algorithm, the following code is used:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:107
msgid "In the preceding code, the most import parameters are:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:109
msgid ""
"``sol_per_pop``: Number of solutions (chromosomes) within the population."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:110
msgid ""
"``num_generations``:  Number of genes in the solution/chromosome. In this "
"case, because only one parameter is simulated (deflection Z at node 12), "
"this value is 1."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:113
msgid "``num_parents_mating``: Number of solutions to select as parents."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:114
msgid ""
"``parent_selection_type``:  Parent selection type. This example uses the "
"``rws`` type (for roulette wheel selection). For more information on parent "
"selection type, see `Genetic algorithms with PyGAD: selection, crossover, "
"mutation <ga_article_>`_ by Lucy Linder."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:118
msgid ""
"``parallel_processing``: Number of parallel workers for the genetic "
"algorithm and how these workers are created. They can be created as a "
"``\"thread\"`` or ``\"process\"``. The example creates the workers as "
"threads, and the amount is equal to the number of instances."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:125
msgid "Helper functions"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:127
msgid ""
"Additionally, for printing purposes, several helper functions are defined:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:136
msgid "Fitness function"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:138
msgid ""
"After all helper functions are defined, the fitness function can be defined:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:145
msgid ""
"`PyMAPDL <pymapdl_main_>`_ and `PyGAD <pygad_docs_>`_ evaluate each "
"chromosome using this function to evaluate how fit is it and assign survival"
" probability."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:150
msgid "Mutation function"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:152
msgid ""
"To further demonstrate `PyGAD <pygad_docs_>`_ capabilities, this example "
"uses a custom mutation function."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:155
msgid "This custom mutation function does two things:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:157
msgid ""
"**To each chromosomes**, it adds a random value between the maximum and "
"minimum of the population."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:158
msgid ""
"**To two random chromosomes**, it additionally adds a random percentage of "
"the mean across all the population between -10% and 10%. The random "
"chromosomes are selected independently. This is to reduce the possibility of"
" the function converging to a local minimal."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:169
msgid "Model assembly"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:171
msgid ""
"Use the GA class to assemble all the parameters and functions created to run"
" the simulation:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:181
msgid "Simulation"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:183
msgid ""
"Once the model is set, use the ``run()`` method to start the simulation:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:192
msgid "Plot fitness and genes values"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:194
msgid ""
"You can plot the solution fitness across generations and the evolution of "
"gene values using the following code:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:205
msgid "Fitness at each generation plot"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:210
msgid "Evolution of genes values"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:214
msgid "Model storage"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:216
msgid "You can store the model in a file for later reuse:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:223
msgid "Load the model:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:232
msgid "Simulation on an HPC cluster using SLURM"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:234
msgid ""
"The previous steps create the PyMAPDL script. To see the file, you can click"
" this link :download:`ml_ga_beam.py <ml_ga_beam.py>`."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:238
msgid ""
"To run the preceding script in an HPC environment, you must create a Python "
"environment, install the packages, and then run this script."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:242
msgid ""
"Log into your HPC cluster. For more information, see :ref:`ref_hpc_login`"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:245
msgid ""
"Create a virtual environment that is accessible from the compute nodes."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:252
msgid ""
"If you have problems when creating the virtual environment or accessing it "
"from the compute nodes, see :ref:`ref_hpc_troubleshooting`."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:256
msgid ""
"Install the requirements for this example from the "
":download:`requirements.txt <requirements.txt>` file."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:259
msgid "Create the bash script ``job.sh``:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:277
msgid ""
"Remember to replace ``%your_partition_name%`` with your cluster partition."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:280
msgid "Run the bash script using the `sbatch <slurm_sbatch_>`_ command:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/hpc/hpc_ml_ga.rst:286
msgid ""
"The preceding command allocates 10 cores for the job. For optimal "
"performance, this value should be higher than the number of MAPDL instances "
"that the :class:`~ansys.mapdl.core.pool.MapdlPool` instance is creating."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/index.rst:35
msgid "Cart-Pole Simulation"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/index.rst:4
#: ../../pymapdl/doc/source/examples/index.rst:45
msgid "Extended examples"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/index.rst:6
msgid ""
"These extended examples explain concepts such as interoperability with other"
" programs, libraries, and features in development."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/index.rst:10
msgid "**Name**"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/index.rst:10
msgid "**Description**"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/index.rst:12
msgid "`Cart Pole Simulation <cartpole_example_notebook_>`_"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/index.rst:12
msgid ""
"Demonstrates a reinforcement machine learning example using MAPDL through "
"PyMAPDL."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/index.rst:14
msgid ":ref:`extended_example01`"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/index.rst:14
msgid ""
"Demonstrates the interoperability between PyMAPDL and the `Gmsh <gmsh_>`_ "
"meshing library."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/index.rst:16
msgid ":ref:`krylov_example`"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/index.rst:16
msgid ""
"Demonstrates the usage of the Krylov method for solving a customized "
"harmonic analysis."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/index.rst:18
msgid ":ref:`dash_example`"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/index.rst:18
msgid "Demonstrates the use of PyMAPDL with Dash."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/index.rst:20
msgid ":ref:`executable_example`"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/index.rst:20
msgid ""
"Demonstrates how to create your own Python app with a command-line "
"interface."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/index.rst:22
msgid ":ref:`gui_example`"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/index.rst:22
msgid "Demonstrates how to create your own GUI app with Python and PySide6."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/index.rst:24
msgid ":ref:`hpc_ml_ga_example`"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/index.rst:24
msgid ""
"Demonstrates how to use PyMAPDL in a high-performance computing system "
"managed by SLURM."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/index.rst:26
msgid ":ref:`stochastic_fem_example`"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/index.rst:26
msgid ""
"Demonstrates using PyMAPDL for stochastic FEA using Monte Carlo simulation."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/index.rst:28
msgid ":ref:`static_rom_data_generation`"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/index.rst:28
msgid ""
"Demonstrates using PyMAPDL and PyDPF to generate training data for an Ansys "
"Twin Builder static reduced order model (ROM)."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/index.rst:31
msgid ":ref:`beam_analysis_report_example`"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/index.rst:31
msgid ""
"Demonstrates using PyMAPDL for beam analysis with automated report "
"generation."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:4
msgid "Stochastic finite element method with PyMAPDL"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:6
msgid ""
"This example leverages PyMAPDL for stochastic finite element method (SFEM) "
"analysis using the Monte Carlo simulation. This extended example "
"demonstrates numerous advantages and workflow possibilities that PyMAPDL "
"provides. It explains important theoretical concepts before presenting the "
"example."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:12
msgid ""
"Often in a mechanical system, system parameters (such as geometry, "
"materials, and loads) and response parameters (such as displacement, strain,"
" and stress) are taken to be deterministic. This simplification, while "
"sufficient for a wide range of engineering applications, results in a crude "
"approximation of actual system behavior."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:16
msgid ""
"To obtain a more accurate representation of a physical system, it is "
"essential to consider the randomness in system parameters and loading "
"conditions, along with the uncertainty in their estimation and their spatial"
" variability. The finite element method is undoubtedly the most widely used "
"tool for solving deterministic physical problems today. To account for "
"randomness and uncertainty in the modeling of engineering systems, the SFEM "
"was introduced."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:22
msgid ""
"SFEM extends the classical deterministic finite element approach to a "
"stochastic framework, offering various techniques for calculating response "
"variability. Among these, Monte Carlo simulation (MCS) stands out as the "
"most prominent method. Renowned for its versatility and ease of "
"implementation, MCS can be applied to virtually any type of problem in "
"stochastic analysis."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:28
msgid "Random variables versus stochastic processes"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:29
msgid ""
"This section explains how random variables and stochastic processes differ. "
"Because these concepts are used for modeling the system randomness, "
"explaining them is important. Random variables are easier to understand from"
" elementary probability theory, which isn't the case for stochastic "
"processes. If the following explanations are too brief, consult books on "
"SFEM. Both [1]_ and [2]_ are recommended resources."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:35
msgid "Random variables"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:36
msgid ""
"**Definition:** A random variable is a rule for assigning to every possible "
"outcome :math:`\\theta` of an experiment a number :math:`X(\\theta)`. For "
"notational convenience, the dependence on :math:`\\theta` is usually dropped"
" and the random variable is written as :math:`X`."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:41
#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:71
msgid "Practical example"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:42
msgid ""
"Imagine a beam with a concentrated load :math:`P` applied at a specific "
"point. The value of :math:`P` is uncertain. It could vary due to "
"manufacturing tolerances, loading conditions, or measurement errors. Here is"
" a mathematical representation:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:45
msgid ""
"P : \\Theta \\longrightarrow \\mathbb{R}\n"
"\n"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:47
msgid ""
"In the preceding equation, :math:`\\Theta` is the sample space of all "
"possible loading scenarios, and :math:`\\mathbb{R}` represents the set of "
"possible load magnitudes. For example, :math:`P` could be modeled as a "
"random variable with a probability density function (PDF):"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:51
msgid ""
"f_P(p) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}}e^{-\\frac{(p-\\mu)^2}{2\\sigma^2}},\n"
"\n"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:53
msgid "Here :math:`\\mu` is the mean load, and :math:`\\sigma^2` is its variance."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:56
msgid "Stochastic processes"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:57
msgid ""
"**Definition:** Recall that a random variable is defined as a rule that "
"assigns a number :math:`X` to every outcome :math:`\\theta` of an "
"experiment. However, in some applications, the experiment evolves with "
"respect to a deterministic parameter :math:`t`, which belongs to an interval"
" :math:`I`. For example, this occurs in an engineering system subjected to "
"random dynamic loads over a time interval :math:`I \\subseteq "
"\\mathbb{R}^+`. In such cases, the system's response at a specific material "
"point is described not by a single random variable but by a collection of "
"random variables :math:`\\{X(t)\\}` indexed by :math:`t \\in I`."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:64
msgid ""
"This `infinite` collection of random variables over the interval :math:`I` "
"is called a stochastic process and is denoted as :math:`\\{X(t), t \\in "
"I\\}` or simply :math:`X`. In this way, a stochastic process generalizes the"
" concept of a random variable as it assigns to each outcome :math:`\\theta` "
"of the experiment a function :math:`X(t, \\theta)`, known as a realization "
"or sample function. Lastly, if :math:`X` is indexed by some spatial "
"coordinate :math:`s \\in D \\subseteq \\mathbb{R}^n` rather than time "
":math:`t`, then :math:`\\{X(s), s \\in D\\}` is called a random field."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:72
msgid ""
"Consider the material property of the beam, such as Young's modulus "
":math:`E(x)`, which may vary randomly along the length of the beam "
":math:`x`.  Instead of being a single random value, :math:`E(x)` is a random"
" field. Its value is uncertain at each point along the domain, and it "
"changes continuously across the beam. Mathematically, :math:`E(x)` is a "
"random field:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:77
msgid ""
"E(x) : x \\in [0,L] \\longrightarrow \\mathbb{R}\n"
"\n"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:79
msgid "Here:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:81
msgid ""
":math:`x` is the spatial coordinate along the length of the beam (:math:`x "
"\\in [0,L]`)."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:82
msgid ""
":math:`E(x)` is a random variable at each point :math:`x`, and its "
"randomness is described by a covariance function or an autocorrelation "
"function."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:85
msgid ""
"For example, :math:`E(x)` could be a Gaussian random field, in which case it"
" has the stationarity property, making its statistics completely defined by "
"its mean (:math:`\\mu_E`), standard deviation (:math:`\\sigma_E`), and "
"covariance function :math:`C_E(x_i,x_j)`. This `stationarity` simply means "
"that the mean and standard deviation of every random variable :math:`E(x)` "
"is constant and equal to :math:`\\mu_E` and :math:`\\sigma_E` respectively. "
":math:`C_E(x_i,x_j)` describes how random variables :math:`E(x_i)` and "
":math:`E(x_j)` are related. For a zero-mean Gaussian random field, the "
"covariance function is given by this equation:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:93
msgid ""
"C_E(x_i,x_j) = \\sigma_E^2e^{-\\frac{\\lvert x_i-x_j \\rvert}{\\ell}}\n"
"\n"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:95
msgid ""
"Here :math:`\\sigma_E^2` is the variance, and :math:`\\ell` is the "
"correlation length parameter."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:97
msgid ""
"To aid understanding, the figure following diagram depicts two equivalent "
"ways of visualizing a stochastic process or random field, that is, as an "
"infinite collection of random variables or as a realization or sample "
"function assigned to each outcome of an experiment."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:103
msgid ""
"A random field :math:`E(x)` viewed as a collection of random variables or as"
" realizations."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:106
msgid ""
"The concepts in the preceding topics generalize to more dimensions, for "
"example, a random vector instead of a random variable, or an "
":math:`\\mathbb{R}^d`-valued stochastic process. A detailed discussion of "
"these generalizations can be found in [1]_ and [2]_."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:111
msgid "Series expansion of stochastic processes"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:112
msgid ""
"Since a stochastic process involves an infinite number of random variables, "
"most engineering applications involving stochastic processes are "
"mathematically and computationally intractable if there isn't a way of "
"approximating them with a series of a finite number of random variables. The"
" next topic explains the series expansion method used in this example."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:118
msgid "Karhunen-Loève (K-L) series expansion for a Gaussian process"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:119
msgid ""
"The K-L expansion of any process is based on a spectral decomposition of its"
" covariance function. Analytical solutions are possible in a few cases, and "
"such is the case of a Gaussian process."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:122
msgid ""
"For a zero-mean stationary Gaussian process, :math:`X(t)`, with covariance "
"function :math:`C_X(t_i,t_j)=\\sigma_X^2e^{-\\frac{\\lvert t_i-t_j "
"\\rvert}{b}}` defined on a symmetric domain :math:`\\mathbb{D}=[-a,a]`, the "
"K-L series expansion is given by this equation:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:126
msgid ""
"X(t) = \\sum_{n=1}^\\infty \\sqrt{\\lambda_{c,n}}\\cdot\\varphi_{c,n}(t)\\cdot\\xi_{c,n} + \\sum_{n=1}^\\infty \\sqrt{\\lambda_{s,n}}\\cdot\\varphi_{s,n}(t)\\cdot\\xi_{s,n},\\quad t\\in\\mathbb{D}\n"
"\n"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:129
msgid "The terms in the first summation are given by"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:131
msgid ""
"\\lambda_{c,n} = \\frac{2b}{1+\\omega_{c,n}^2\\cdot b^2},\\quad \\varphi_{c,n}(t) = k_{c,n}\\cos(\\omega_{c,n}\\cdot t)\n"
"\n"
"k_{c,n} = \\frac{1}{\\sqrt{a+\\frac{\\sin(2\\omega_{c,n}\\cdot a)}{2\\omega_{c,n}}}}"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:138
msgid ""
"In the preceding terms, :math:`\\omega_{c,n}` is obtained as the solution of"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:140
msgid ""
"\\frac{1}{b} - \\omega_{c,n}\\cdot\\tan(\\omega_{c,n}\\cdot a) = 0 \\quad \\text{in the range} \\quad \\biggl[(n-1)\\frac{\\pi}{a}, (n-\\frac{1}{2})\\frac{\\pi}{a}\\biggr]\n"
"\n"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:143
msgid "The terms in the second summation are given by"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:145
msgid ""
"\\lambda_{s,n} = \\frac{2b}{1+\\omega_{s,n}^2\\cdot b^2},\\quad \\varphi_{s,n}(t) = k_{s,n}\\sin(\\omega_{s,n}\\cdot t)\n"
"\n"
"k_{s,n} = \\frac{1}{\\sqrt{a-\\frac{\\sin(2\\omega_{s,n}\\cdot a)}{2\\omega_{s,n}}}}"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:152
msgid ""
"In the preceding terms, :math:`\\omega_{s,n}` is obtained as the solution of"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:154
msgid ""
"\\frac{1}{b}\\cdot\\tan(\\omega_{s,n}\\cdot a) + \\omega_{s,n} = 0 \\quad \\text{in the range} \\quad \\biggl[(n-\\frac{1}{2})\\frac{\\pi}{a}, n\\frac{\\pi}{a}\\biggr]\n"
"\n"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:157
msgid ""
"It is worth mentioning that :math:`\\lambda` and :math:`\\omega` in the "
"series expansion are referred to as eigenvalue and frequency respectively."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:160
msgid ""
"In the case of an asymmetric domain, such as "
":math:`\\mathbb{D}=[-t_{min},t_{max}]`, a shift parameter :math:`T = "
"(t_{min}+t_{max})/2` is required and the corresponding symmetric domain "
"becomes defined by this equation:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:163
msgid ""
"D' = D - T = \\biggl[\\frac{t_{min}-t_{max}}{2}, \\frac{t_{max}-t_{min}}{2} \\biggr]\n"
"\n"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:165
msgid "The series expansion is then defined by this equation:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:167
msgid ""
"X(t) = \\sum_{n=1}^\\infty \\sqrt{\\lambda_{c,n}}\\cdot\\varphi_{c,n}(t-T)\\cdot\\xi_{c,n} + \\sum_{n=1}^\\infty \\sqrt{\\lambda_{s,n}}\\cdot\\varphi_{s,n}(t-T)\\cdot\\xi_{s,n},\\quad t\\in\\mathbb{D}\n"
"\n"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:169
msgid ""
"The K-L expansion of a Gaussian process has the property that "
":math:`\\xi_{c,n}` and :math:`\\xi_{s,n}` are independent standard normal "
"variables, that is they follow the :math:`\\mathcal{N}(0,1)` distribution. "
"Another property is that :math:`\\lambda_{c,n}` and :math:`\\lambda_{s,n}` "
"converge to zero fast (in the mean square sense). For practical "
"implementation, this means that the infinite series of the K-L expansion is "
"truncated after a finite number of terms, giving the approximation:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:174
msgid ""
"X(t) \\approx \\hat{X}(t) = \\sum_{n=1}^P \\sqrt{\\lambda_{c,n}}\\cdot\\varphi_{c,n}(t)\\cdot\\xi_{c,n} + \\sum_{n=1}^Q \\sqrt{\\lambda_{s,n}}\\cdot\\varphi_{s,n}(t)\\cdot\\xi_{s,n}\n"
"\n"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:177
msgid ""
"Equation :math:numref:`approximation` is computationally feasible to handle."
" A summary of how to use it to generate realizations of :math:`X(t)` "
"follows:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:179
msgid ""
"To generate the j-th realization, draw a random value for each "
":math:`\\xi_{c,n}, n=1,\\dots ,P, \\quad \\xi_{s,n}, n=1,\\dots ,Q` from the"
" standard normal distribution :math:`\\mathcal{N}(0,1)` and obtain "
":math:`\\xi_{c,1}^j,\\dots ,\\xi_{c,P}^j, \\quad \\xi_{s,1}^j,\\dots "
",\\xi_{s,P}^j`"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:182
msgid ""
"Insert these values into equation :math:numref:`approximation` in other to "
"obtain the j-th realization:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:184
msgid ""
"\\hat{X}^j(t) = \\sum_{n=1}^P \\sqrt{\\lambda_{c,n}}\\cdot\\varphi_{c,n}(t)\\cdot\\xi_{c,n}^j + \\sum_{n=1}^Q \\sqrt{\\lambda_{s,n}}\\cdot\\varphi_{s,n}(t)\\cdot\\xi_{s,n}^j\n"
"\n"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:186
msgid ""
"To generate additional realizations, simply draw new random values for "
":math:`\\xi_{c,n}, n=1,\\dots ,P, \\quad \\xi_{s,n}, n=1,\\dots ,Q` each "
"from :math:`\\mathcal{N}(0,1)`."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:189
msgid ""
"In this case of a field, the preceding discussion applies as the only "
"difference is a change in notation (for example :math:`t` to :math:`x`)."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:192
msgid "Monte Carlo simulation"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:193
msgid ""
"For linear static problems in the context of FEM, the system equations that "
"must be solved change. The well-known deterministic equation defined by:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:195
msgid ""
"\\pmb{K}\\pmb{U} = \\pmb{F}\n"
"\n"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:197
msgid "changes to"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:199
msgid ""
"\\pmb{K}(\\pmb{\\xi})\\pmb{U}(\\pmb{\\xi}) = \\pmb{F}(\\pmb{\\xi})\n"
"\n"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:201
msgid ""
"Here :math:`\\pmb{\\xi}` collects sources of system randomness. The Monte "
"Carlo simulation for solving the preceding equation consists of generating a"
" large number of :math:`N_{sim}` of samples :math:`\\pmb{\\xi}, i=1,\\dots "
",N_{sim}` from their probability distribution and for each of these samples "
"solving the deterministic problem:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:205
msgid ""
"\\pmb{K}(\\pmb{\\xi}_{(i)})\\pmb{U}(\\pmb{\\xi}_{(i)}) = \\pmb{F}(\\pmb{\\xi}_{(i)})\n"
"\n"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:207
msgid ""
"The next step is to collect the :math:`N_{sim}` response vectors "
":math:`\\pmb{U_i} := \\pmb{U}(\\pmb{\\xi}_{(i)})` and perform a statistical "
"postprocessing to extract useful information such as mean value, variance, "
"histogram, and empirical PDF."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:213
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:56
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:86
msgid "Problem description"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:214
msgid ""
"The following plane stress problem shows a two-dimensional cantilever "
"structure under a point load."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:218
msgid "A two-dimensional cantilever structure under a point load."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:220
msgid ""
":math:`P` is a random variable following the Gaussian distribution "
":math:`\\mathcal{N}(10,2)` (kN), and the modulus of elasticity is a random "
"field given by this expression:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:223
msgid ""
"E(x) = 10^5(1+0.10f(x)) (kN/m^2)\n"
"\n"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:225
msgid ""
"Here :math:`f(x)` is a zero mean stationary Gaussian field with unit "
"variance. The covariance function for :math:`f` is "
":math:`C_f(x_r,x_s)=e^{-\\frac{\\lvert x_r-x_s \\rvert}{3}}`."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:227
msgid ""
"Using the K-L series expansion, generate 5000 realizations for :math:`E(x)` "
"and perform Monte Carlo simulation to determine the PDF of the response "
":math:`u`, at the bottom right corner of the cantilever."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:231
msgid ""
"If some design code stipulates that the displacement :math:`u` must not "
"exceed :math:`0.2 \\: m`, how confident can you be that the structure meets "
"this requirement?"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:235
msgid ""
"This example strongly emphasizes how PyMAPDL can help to supercharge "
"workflows. At a very high level, subsequent topics use Python libraries to "
"handle computations related to the stochasticity of the problem and use "
"MAPDL to run the necessary simulations all within the comfort of a Python "
"environment."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:240
msgid "Evaluating the Young's modulus"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:241
msgid ""
"Code that allows representation of the zero-mean Gaussian field :math:`f` is"
" implemented. This simply means solving the :math:numref:`cosine equation` "
"and :math:numref:`sine equation` and then substituting calculated values "
"into :math:numref:`cosine terms` and :math:numref:`sine terms` to obtain the"
" constant terms in those equations. The number of retained terms :math:`P` "
"and :math:`Q` in :math:numref:`approximation` can be automatically "
"determined by structuring the code to stop computing values when "
":math:`\\lambda_{c,n}, \\lambda_{s,n}` become lower than a desired accuracy "
"level. The implementation follows:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:252
msgid ""
"The next step is to put this all together in a function that expresses the "
":math:`f` using the :math:numref:`approximation` equation:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:258
msgid ""
"The function for evaluating the Young's modulus itself is straight forward:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:265
msgid "Realizations of the Young's modulus"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:266
msgid ""
"You can now generate sample realizations of the Young's modulus to see what "
"they look like:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:274
msgid ""
"10 realizations of the Young's modulus depict randomness from one "
"realization to another."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:277
msgid "Verification of the implementation"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:278
msgid ""
"You can compute the theoretical mean and variance of the Young's modulus and"
" then use them to verify the correctness of the implemented code."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:281
msgid "For the mean:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:283
msgid ""
"\\mathbb{E}(E) = \\mathbb{E}(10^5(1+0.10f))\n"
"\n"
"\\mathbb{E}(E) = 10^5(1 + 0.1\\mathbb{E}(f))\n"
"\n"
"\\mathbb{E}(E) = 10^5(1 + 0.1(0)) = 10^5 \\: kN/m^2"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:293
msgid "For the variance:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:295
msgid ""
"Var(E) = \\mathbb{E}(E^2) - [\\mathbb{E}(E)]^2\n"
"\n"
"Var(E) = \\mathbb{E}[10^{10}(1 + 0.2f + 0.01f^2)] - 10^{10}\n"
"\n"
"Var(E) = 10^{10}[1 + 0.2\\mathbb{E}(f) + 0.01\\mathbb{E}(f^2)] - 10^{10}\n"
"\n"
"Var(E) = 10^{10}[0.2(0) + 0.01(1)]\n"
"\n"
"Var(E) = 10^8 \\: {kN}^2/m^4"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:308
msgid ""
"It is expected that as the number of realizations increase indefinitely, the"
" ensemble mean and variance should converge towards theoretical values "
"calculated in :math:numref:`theoretical mean` and :math:numref:`theoretical "
"variance`."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:311
msgid ""
"Firstly, several realizations are generated. 5000 is enough, which is the "
"same as the number of simulations to be run later on. Statistical processing"
" is then performed on these realizations."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:318
msgid "You can generate a plot of the mean versus the number of realizations:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:326
msgid ""
"The mean converges to the true value as the number of realizations is "
"increased."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:328
msgid ""
"You can also generate a plot of the variance versus the number of "
"realizations:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:336
msgid ""
"The variance converges to the true value as the number of realizations is "
"increased."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:338
msgid ""
"The preceding plots confirm that the implementation is correct. If you "
"desire more accuracy, you can further decrease the minimum eigenvalue, but "
"the value already chosen is sufficient."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:341
msgid "Running the simulations"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:342
msgid ""
"Focus now shifts to the PyMAPDL part of this example. Remember that the "
"problem requires running 5000 simulations. Therefore, you must write a "
"workflow that performs these actions:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:345
msgid "Create the geometry of the cantilever model."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:347
msgid ""
"Mesh the model. The following code uses the four-node PLANE182 elements."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:349
msgid ""
"For each simulation, generate one realization of :math:`E` and one sample of"
" :math:`P`."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:351
msgid ""
"For each simulation, loop through the elements and for each element, use the"
" generated realization to assign the value of the Young's modulus. Also "
"assign the load for each simulation."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:354
msgid "Solve the model and store :math:`u` for each simulation."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:357
msgid ""
"One realization continuously varies with :math:`x`, but a plane stress "
"element like PLANE182 can only have a constant Young's modulus assigned. "
"Therefore, for an element whose :math:`x`-coordinates are between "
":math:`x_1` and :math:`x_2`, you can simply assign the average value of "
":math:`E` between these two values or assign the value of :math:`E` at the "
"centroid. The later is chosen for this implementation. The method chosen "
"becomes insignificant with a finer mesh as both methods should produce "
"similar results."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:363
msgid "This function implements the preceding steps:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:369
msgid ""
"You can pass the required arguments to the defined function to run the "
"simulations:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:376
msgid "Answering problem questions"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:377
msgid ""
"To determine the PDF of the response :math:`u`, you can perform a "
"statistical postprocessing of simulation results:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:386
msgid "The PDF of response :math:`u`."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:388
msgid ""
"To determine whether the structure meets the requirement of the design code,"
" simply evaluate the probability that the response :math:`u` is less than "
":math:`0.2 \\: m`:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:396
msgid ""
"The computed probability is approximately 99%, which is a measure of how "
"well the structure satisfies the design requirement."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:400
msgid ""
"Splitting the overall implementation of this example into several functions "
"lets you modify practically any aspect of the problem statement with minimal"
" edits to the code for testing out other scenarios. For example, you can use"
" a different structural geometry, mesh size, or loading condition."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:404
msgid "Improve simulation speed using multi-threading"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:405
msgid ""
"One of the main drawbacks of MCS is the number of simulations required. In "
"this example, 5000 simulations can take quite some time to run on a single "
"MAPDL instance. To speed things up, you can use the "
":class:`~ansys.mapdl.core.pool.MapdlPool` class to run simulations across "
"multiple MAPDL instances:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:414
msgid ""
"To run simulations over 10 MAPDL instances, call the preceding function with"
" appropriate arguments:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:420
msgid "The simulations are completed much faster."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:423
msgid ""
"In a local test, using the ``MapdlPool`` approach (with 10 MAPDL instances) "
"takes about 38 minutes to run, while a single instance runs for about 3 "
"hours. The simulation speed depends on a multitude of factors, but this "
"comparison provides an idea of the speed gain to expect when using multiple "
"instances."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:428
msgid ""
"Ensure there are enough licenses available to run multiple MAPDL instances "
"concurrently."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:432
msgid ""
"Ioannis Kalogeris, \"Advanced surrogate modeling and machine learning "
"methods in computational stochastic mechanics,\" PhD Dissertation"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/sfem/stochastic_fem.rst:433
msgid ""
"Dimitris G. Giovanis and Vissarion Papadopoulos, \"Stochastic Finite Element"
" Methods : An Introduction\""
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:5
msgid "Create training data for a 3D static reduced order model (ROM)"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:7
msgid ""
"This example shows how to run a parametric sweep on an MAPDL model and "
"export the output displacement and stress data into the format required to "
"build a static ROM with Ansys Twin Builder."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:11
msgid ""
"The general data structure for the ROM building is shown in the following "
"figure."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:15
msgid "**Organization of files and directories for static ROM creation.**"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:17
msgid "Here are the specific files outputted by the example::"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:44
msgid "MAPDL notch model"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:45
msgid ""
"This example uses the model created in "
":ref:`ref_3d_plane_stress_concentration` as a base. This example was "
"modified to add a nodal component, ``load_node``, to which the force is "
"applied. This makes is simple to retrieve and modify the force scoping for "
"parametric runs."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:49
msgid ""
"The model, which uses load force in Newtons as the input, is parametrically "
"varied."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:53
msgid "Additional packages used"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:55
msgid ""
"In addition to PyMAPDL, the example requires that the following packages are"
" installed and running:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:58
msgid "`NumPy <https://numpy.org>`_, which is used for using NumPy arrays"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:59
msgid ""
"`PyDPF <dpf_core_docs_>`_, which is used to efficiently manipulate result "
"data"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:60
msgid ""
"`PyTwin <pytwin_docs_>`_, which is used to convert result data to binary "
"snapshots"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:64
msgid "Core functions"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:67
msgid "Solve the MAPDL parametric variations"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:68
msgid ""
"The :func:`run_mapdl_variations` function solves the MAPDL model for a set "
"of parameter variations. It loads a saved MAPDL database and loops through a"
" list of force values. For each value, it applies that force to a nodal "
"component, solves the model, and records the location of the result file, "
"along with the parameter names and values."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:78
msgid "Export ROM data for the solved variations"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:79
msgid ""
"The :func:`export_static_ROM_data` function exports the ROM data from a set "
"of solved parametric variations. The function loads each results file into "
"DPF and gets the scoping. It then calls the "
":func:`export_static_ROM_variation` function to export the ROM data for that"
" result file. The ``new_metadata`` Boolean is set to ``True`` on the first "
"loop to trigger the creation of the ``points.bin`` and ``settings.json`` "
"files and a new ``doe.csv`` file."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:85
msgid ""
"The :func:`pytwin.write_binary` function writes the result field data to a "
"ROM binary file."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:94
msgid "Export ROM data for a specific variation"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:95
msgid ""
"The :func:`export_static_ROM_variation` function exports ROM snapshot data "
"for a specific parametric variation. The function exports a snapshot for "
"``displacement`` and for ``stress`` to correspondingly named folders and "
"records the snapshot name and parameter data to the ``doe.csv`` file in that"
" folder."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:100
msgid ""
"The results are sorted by the scoping IDs to ensure consistent ordering of "
"results and points."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:102
msgid ""
"The ``new_metadata`` Boolean controls the creation of the ``points.bin`` and"
" ``settings.json`` files and a new ``doe.csv`` file. If it is ``False``, the"
" first two files are not written, and parameter data is appended to the "
"existing ``doe.csv`` file."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:112
msgid "Additional functions"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:115
msgid "Set the export scope"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:116
msgid ""
"The ROM data is exported on all nodes connected to elements. The "
":func:`get_scoping` function gets the nodes that are connected to all the "
"elements in the mesh. This avoids including any unconnected nodes, which "
"have null values, in the scoping."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:120
msgid ""
"The returned scoping initially contains duplicate node IDs because a node "
"can be connected to multiple elements and is included once for each one. "
"Creating a Python :type:`set` of node IDs removes the duplicates."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:129
msgid "Write points coordinates file"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:130
msgid ""
"The :func:`write_points` function writes the x, y, z coordinates of the "
"scoped nodes to the ROM ``points.bin`` file using the "
":func:`pytwin.write_binary` function."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:138
msgid "Write ROM settings"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:139
msgid ""
"The :func:`write_settings` function writes the ROM ``settings.json`` file. "
"This records information such as the field dimensionality (scalar, vector, "
"tensor), result name, unit, and whether it represent a deformation. The full"
" file specification is available in the Twin Builder Static ROM Builder "
"documentation."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:144
msgid ""
"The original node numbers from export scoping are compressed and stored in "
"the ``ids`` field."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:151
msgid "Compress ID list"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:152
msgid ""
"The ``settings.json`` specification supports storing lists of consecutive "
"integers in a compressed fashion. The :func:`compress_id_list` function "
"implements this compression."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:155
msgid ""
"Runs of three or more incrementally increasing values are replaced by a "
"sequence of ``start, -1, end``."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:164
msgid "Run the script"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:166
msgid ""
"To run the script, install PyMAPDL and the additional dependencies listed in"
" `Additional packages used`_. Then download and run "
":download:`static_rom_data_generation.py <static_rom_data_generation.py>`. "
"The ROM data is stored in a folder named ``ansys_pymadl_Static_ROM`` in the "
"system temporary folder."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:173
msgid "Script assumptions and modification ideas"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:176
msgid "Local execution"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:177
msgid ""
"The scripts assume that both the MAPDL solving and DPF export are performed "
"locally on the same machine as the Python script execution."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:180
msgid "For potential modification options, see :ref:`ref_dpf_basic_example`."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:183
msgid "Additional result types"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:184
msgid ""
"The script exports ``stress`` and ``displacement`` results. You can include "
"or exclude additional result types by modifying the "
":func:`export_static_ROM_variation` function."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:188
msgid ""
"For example, you can add elastic strain by making these changes to the "
":func:`export_static_ROM_variation` function from line 181:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:207
msgid "Modify result scoping"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:208
msgid ""
"The script exports results on all nodes that are connected to elements. This"
" does not account for nodes that are connected to elements but do not have "
"results associated with them. For example, MPC184 pilot nodes would not "
"usually have a stress result."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:212
msgid "The script also does not allow scoping to components."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:214
msgid ""
"You could modify the :func:`get_scoping` function to allow broader scoping "
"options."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:217
msgid "Modify settings"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:218
msgid ""
"The ``settings.json`` files generated by the :func:`write_settings` function"
" implicitly assume SI units. (``unitFactor`` is a scaling factor from SI "
"units.) These files do not include any information about unit dimensions."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:222
msgid "Here is an example for displacement:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:228
msgid "Here is an example for stress:"
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:234
msgid ""
"You can add logic to check the model units and change the ``unitDimension`` "
"and ``unitFactor`` fields accordingly. While this information is not used to"
" build the ROM, it can be used when consuming the ROM in downstream "
"applications."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:238
msgid ""
"If results are included on nodal components, you can reference them in the "
"``namedSelections`` field. Each entry consists of a name and the indices of "
"the scoped nodes in the overall scoping (not node IDs). You can use the "
":func:`compress_id_list` function to compress long lists of nodes."
msgstr ""

#: ../../pymapdl/doc/source/examples/extended_examples/static_rom/static_rom_data_generation.rst:243
msgid ""
"For example, to add a named selection called ``first_nodes`` on the first "
"one hundred scoped nodes and another called ``second_nodes`` to the fiftieth"
" to one hundred and fiftieth nodes, you would add this:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-"
"examples_2d_magnetostatic_solenoid-BodyFlux_Averaging.py>` to download the "
"full example code."
msgstr ""
"完全なサンプル・コードをダウンロードするには、 :ref:`最後に進んでください "
"<sphx_glr_download_examples_gallery_examples_00-mapdl-"
"examples_2d_magnetostatic_solenoid-BodyFlux_Averaging.py>` 。"

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:25
msgid "Analysis of a 2D magnetostatic solenoid"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:27
msgid ""
"This example shows how to gather and plot results with material "
"discontinuities across elements (Power graphics style) versus the default "
"full average results (Full graphics style)."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:35
msgid ""
"Mechanical APDL has two averaging methods for presenting results. The "
"following descriptions indicate the primary differences, although other "
"differences exist."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:38
msgid ""
"**Full graphics**: Presents the entire selected model with node averaged "
"results. In the case of a node shared by two or more elements that have "
"differing materials, the stress field is continuous across the element "
"material boundary (the shared nodes)."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:43
msgid ""
"**Power graphics**: Presents the entire selected model with averaged results"
" within elements of the same material and discontinuous across material "
"boundaries."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:47
msgid "This example focuses on material boundaries."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:49
msgid ""
"Native PyMAPDL postprocessing is like MAPDL's Full graphics method with "
"respect to material boundaries."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:52
msgid "The geometry of the solenoid is given in Figure 1."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:54
msgid "Solenoid geometry description"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:60
msgid "**Figure 1: Solenoid geometry description.**"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:63
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:266
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:151
msgid "Loads and boundary conditions"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:65
msgid ""
"The coil has a current density applied equal to 650 turns at 1 amp per turn."
" All exterior nodes have their Z magnetic vector potential set to zero, "
"enforcing a flux parallel condition."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:71
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:49
msgid "Import modules"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:73
msgid ""
"In addition to the usual libraries, Matplotlib and PyVista are imported. The"
" MAPDL default contour color style is used so Matplotlib is imported. The "
"Power Graphics style plot is then set up via PyVista."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:92
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/slashmap_cfx_mapping.rst:74
msgid "Launch MAPDL service"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:109
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:85
msgid "Set up the FE model"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:111
msgid ""
"Define parameter values for geometry, loading, and mesh sizing. The model is"
" built in centimeters and is then scaled to meters."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:114
msgid "The element type 'Plane233' is used for 2D magnetostatic analysis."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:129
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_static.rst:78
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:104
msgid "Set material properties"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:131
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:106
msgid "Units are in the international unit system."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:147
msgid "Set parameters"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:149
msgid "Set parameters for geometry design."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:180
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:90
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:125
msgid "Create geometry"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:182
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:127
msgid "Create the model geometry."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:204
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:232
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:656
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:90
msgid "Mesh"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:206
msgid "Set the model mesh."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:247
msgid "Scale mesh to meters"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:249
msgid "Scale the model to be one meter in size."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:268
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:153
msgid "Define loads and boundary conditions."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:289
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/acoustic_analysis.rst:147
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:150
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:195
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:109
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:90
msgid "Solve the model"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:291
msgid "Solve the magnetostatic analysis."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:306
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:357
msgid "Postprocessing"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:308
msgid "Open the result file and read in the last set of results"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:322
msgid "Print the nodal values"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:336
msgid "Create an MAPDL Power Graphics plot of the X-direction magnetic flux"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:338
msgid ""
"The MAPDL colors are reversed via the ``rgb`` command so that the background"
" is white with black text and element edges."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:363
msgid "Obtain grid and scalar data"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:365
msgid "First, obtain the set of unique material IDs in the model"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:378
msgid ""
"For each unique material ID, the elements and their nodes are selected. The "
"``grids`` list is appended with the mesh information of just those elements,"
" and the ``scalars`` list is appended with the nodal X-direction magnetic "
"flux."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:400
msgid ""
"If interested print the grids list and perhaps compare to a print of "
"mapdl.mesh.grid"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:416
msgid "Color map and result plot"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:418
msgid ""
"Because some of the MAPDL contour colors do not have an exact match in the "
"standard Matplotlib color library, an attempt is made to match the color and"
" use the Hex RGBA number value."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:422
msgid ""
"For each item in the grids list the grid is added to the plot and 9 contour "
"colors requested using the prior define color map and the same contour "
"legend."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:426
msgid "The plot is then shown and it recreates the native plot quite well."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:461
msgid "Exiting MAPDL"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:479
msgid ""
":download:`Download Jupyter notebook: 2d_magnetostatic_solenoid-"
"BodyFlux_Averaging.ipynb <2d_magnetostatic_solenoid-"
"BodyFlux_Averaging.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:483
msgid ""
":download:`Download Python source code: 2d_magnetostatic_solenoid-"
"BodyFlux_Averaging.py <2d_magnetostatic_solenoid-BodyFlux_Averaging.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_magnetostatic_solenoid-BodyFlux_Averaging.rst:487
msgid ""
":download:`Download zipped: 2d_magnetostatic_solenoid-BodyFlux_Averaging.zip"
" <2d_magnetostatic_solenoid-BodyFlux_Averaging.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-"
"examples_2d_plate_with_a_hole.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:24
msgid "MAPDL 2D Plane Stress Concentration Analysis"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:26
msgid ""
"This tutorial shows how you can use PyMAPDL to determine and verify the "
"\"stress concentration factor\" when modeling using 2D plane elements and "
"then verify this using 3D elements."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:30
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:35
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/01-smoothing-element-size-transitions.rst:34
msgid "First, start MAPDL as a service."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:48
msgid "Element Type and Material Properties"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:49
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:118
msgid ""
"This example will use PLANE183 elements as a thin plate can be modeled with "
"plane elements provided that KEYOPTION 3 is set to 3 and a thickness is "
"provided."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:53
msgid "This example will use SI units."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:79
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:51
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:43
msgid "Geometry"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:80
msgid ""
"Create a rectangular area with the hole in the middle.  To correctly "
"approximate an infinite plate, the maximum stress must occur far away from "
"the edges of the plate.  A length to width factor can approximate this."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:116
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:117
msgid "Meshing"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:117
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:122
msgid ""
"Mesh the plate using a higher density near the hole and a lower density for "
"the remainder of the plate by setting ``LESIZE`` for the lines nearby the "
"hole and ``ESIZE`` for the mesh global size."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:121
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:126
msgid "Line numbers can be identified through inspection using ``lplot``"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:155
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_plate_thermal.rst:65
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/acoustic_analysis.rst:127
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/exhaust_manifold_thermal_stress.rst:54
msgid "Boundary Conditions"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:156
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:172
msgid ""
"Fix the left-hand side of the plate in the X direction and set a force of 1 "
"kN in the positive X direction."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:201
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:227
msgid "Solve the Static Problem"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:202
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:228
msgid "Solve the static analysis"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:218
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:244
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pressure_vessel.rst:145
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:222
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:127
msgid "Post-Processing"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:219
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:245
msgid ""
"The static result can be post-processed both within MAPDL and outside of "
"MAPDL using ``pyansys``.  This example shows how to extract the von Mises "
"stress and plot it using the ``pyansys`` result reader."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:251
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:278
msgid "Compute the Stress Concentration"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:252
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:279
msgid ""
"The stress concentration :math:`K_t` is the ratio of the maximum stress at "
"the hole to the far-field stress, or the mean cross sectional stress at a "
"point far from the hole.  Analytically, this can be computed with:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:257
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:284
msgid ":math:`\\sigma_{nom} = \\frac{F}{wt}`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:259
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:286
msgid "Where"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:261
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:288
msgid ":math:`F` is the force"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:262
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:289
msgid ":math:`w` is the width of the plate"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:263
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:290
msgid ":math:`t` is the thickness of the plate."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:265
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:292
msgid ""
"Experimentally, this is computed by taking the mean of the nodes at the "
"right-most side of the plate."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:282
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:310
msgid ""
"Since the expected nominal stress across the cross section of the hole will "
"increase as the size of the hole increases, regardless of the stress "
"concentration, the stress must be adjusted to arrive at the correct stress."
"  This stress is adjusted by the ratio of the width over the modified cross "
"section width."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:305
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:333
msgid "Batch Analysis"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:306
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:334
msgid ""
"The above script can be placed within a function to compute the stress "
"concentration for a variety of hole diameters.  For each batch, MAPDL is "
"reset and the geometry is generated from scratch."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:430
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:465
msgid "Run the batch and record the stress concentration"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:449
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:568
msgid "Analytical Comparison"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:450
msgid ""
"Stress concentrations are often obtained by referencing tablular results or "
"polynominal fits for a variety of geometries.  According to Peterson's "
"Stress Concentration Factors (ISBN 0470048247), the analytical equation for "
"a hole in a thin plate in uniaxial tension:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:455
msgid ""
":math:`k_t = 3 - 3.14\\frac{d}{h} + 3.667\\left(\\frac{d}{h}\\right)^2 - "
"1.527\\left(\\frac{d}{h}\\right)^3`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:457
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:508
msgid "Where:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:459
msgid ":math:`k_t` is the stress concentration"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:460
msgid ":math:`d` is the diameter of the circle"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:461
msgid ":math:`h` is the height of the plate"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:463
msgid ""
"As shown in the following plot, ANSYS matches the known tabular result for "
"this geometry remarkably well using PLANE183 elements. The fit to the "
"results may vary depending on the ratio between the height and width of the "
"plate."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:499
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:276
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:590
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_plate_thermal.rst:135
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/contact_elements.rst:119
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/geometry.rst:256
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/mapdl_3d_beam.rst:129
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/mapdl_beam.rst:159
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/path_operations.rst:257
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pressure_vessel.rst:246
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pyvista_mesh.rst:144
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:369
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:276
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:482
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:303
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:418
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:423
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/01-smoothing-element-size-transitions.rst:164
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:179
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:178
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/05-explore_mapdl_files.rst:208
#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:1122
msgid "Stop mapdl"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:517
msgid ""
":download:`Download Jupyter notebook: 2d_plate_with_a_hole.ipynb "
"<2d_plate_with_a_hole.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:521
msgid ""
":download:`Download Python source code: 2d_plate_with_a_hole.py "
"<2d_plate_with_a_hole.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_plate_with_a_hole.rst:525
msgid ""
":download:`Download zipped: 2d_plate_with_a_hole.zip "
"<2d_plate_with_a_hole.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-"
"examples_2d_pressure_vessel.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:24
msgid "2D Pressure Vessel"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:26
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pressure_vessel.rst:26
msgid ""
"This example demonstrates how to create a basic pressure vessel and apply a "
"pressure to it."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:32
msgid ""
"In this example we will perform stress analysis of pipe due to internal "
"pressure. Due to the symmetry in geometry and loading, the strain along its "
"axis is negligible and therefore we model this system as 2D plane strain."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:37
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:58
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/exhaust_manifold_thermal_stress.rst:40
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:39
msgid "Procedure"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:39
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/exhaust_manifold_thermal_stress.rst:41
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:41
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:53
msgid "Launch MAPDL instance"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:40
msgid "Setup the model as Python function using PyMAPDL"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:41
msgid "Automate mesh convergence study"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:42
msgid "Plot results of interest"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:45
msgid "Additional Packages Used"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:47
msgid "`Matplotlib <https://matplotlib.org>`_ is used for plotting purposes."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:48
msgid "`NumPy <https://numpy.org>`_ is used for using NumPy arrays."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:52
msgid "Problem Figure"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:54
msgid "Basic Pressure Vessel"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:69
msgid "Launch MAPDL"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:85
msgid "Setup the pipe cross section using Python function"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:87
msgid ""
"We use a function here so we can rebuild the pipe using parameters rather "
"than calling a script several times."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:170
msgid "Perform the mesh convergence study"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:204
msgid "Plot mesh convergence results"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:205
msgid "Draw a dotted line showing the convergence value"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:222
msgid "Resume results from last analysis from mesh convergence study"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:242
msgid "Plot nodal displacement"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:244
msgid "Enter post-processing (/POST1) and select the first load step"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:263
msgid "Plot nodal equivalent stress"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:294
msgid ""
":download:`Download Jupyter notebook: 2d_pressure_vessel.ipynb "
"<2d_pressure_vessel.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:298
msgid ""
":download:`Download Python source code: 2d_pressure_vessel.py "
"<2d_pressure_vessel.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/2d_pressure_vessel.rst:302
msgid ""
":download:`Download zipped: 2d_pressure_vessel.zip <2d_pressure_vessel.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-"
"examples_3d_notch.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:24
msgid "3D Stress Concentration Analysis for a Notched Plate"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:26
msgid ""
"This tutorial is the 3D corollary to the 2D plane example "
":ref:`ref_plane_stress_concentration`. However, this example verifies the "
"stress concentration factor :math:`K-t` when modeling opposite single "
"notches in a finite width thin plate."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:32
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_plate_thermal.rst:30
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/path_operations.rst:30
msgid "First, start MAPDL as a service and disable all but error messages."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:52
msgid "Create a rectangular area with two notches at the top and bottom."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:171
msgid "Material Properties and Boundary Conditions"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:339
msgid ""
"This section has been disabled to reduce the execution time of this example."
" Enable it by setting ``RUN_BATCH = TRUE``"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:486
msgid "Analytical Solution"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:487
msgid ""
"Stress concentrations are often obtained by referencing tabular results or "
"polynominal fits for a variety of geometries.  According to *Roark’s "
"Formulas for Stress and Strain* (Warren C. Young and Richard G. Budynas, "
"Seventh Edition, McGraw-Hill) the analytical equation for two U notches in a"
" thin plate in uniaxial tension:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:493
msgid ""
"K_t = C_1 + C_2 \\left(\\dfrac{2h}{D}\\right) + C_3 "
"\\left(\\dfrac{2h}{D}\\right)^2 + C_4 \\left(\\dfrac{2h}{D}\\right)^3"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:497
msgid "where:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:499
msgid ""
"\\begin{array}{c|c|c}\n"
"    & 0.1 \\leq h/r \\leq 2.0                 & 2.0 \\leq h/r \\leq 50.0 \\\\ \\hline\n"
"C_1 & 0.85 + 2.628 \\sqrt{h/r} - 0.413 h/r   & 0.833 + 2.069 \\sqrt{h/r} - 0.009 h/r \\\\\n"
"C_2 & -1.119 - 4.826 \\sqrt{h/r} + 2.575 h/r & 2.732 - 4.157   \\sqrt{h/r} + 0.176 h/r \\\\\n"
"C_3 & 3.563 - 0.514 \\sqrt{h/r} - 2.402 h/r  & -8.859 + 5.327 \\sqrt{h/r} - 0.32 h/r \\\\\n"
"C_4 & -2.294 + 2.713 \\sqrt{h/r} + 0.240 h/r & 6.294 - 3.239 \\sqrt{h/r} + 0.154 h/r\n"
"\\end{array}\n"
"\n"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:510
msgid ":math:`K_t` is the stress concentration"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:511
msgid ":math:`r` is the radius of the notch"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:512
msgid ":math:`h` is the notch depth"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:513
msgid ":math:`D` is the width of the plate"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:515
msgid "In this example the ratio is given as :math:`2h/D`."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:517
msgid "These formulas are converted in the following function:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:548
msgid ""
"which is used later to calculate the concentration factor for the given "
"ratios:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:570
msgid ""
"As shown in the following plot, MAPDL matches the known tabular result for "
"this geometry remarkably well using PLANE183 elements. The fit to the "
"results may vary depending on the ratio between the height and width of the "
"plate."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:608
msgid ":download:`Download Jupyter notebook: 3d_notch.ipynb <3d_notch.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:612
msgid ":download:`Download Python source code: 3d_notch.py <3d_notch.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_notch.rst:616
msgid ":download:`Download zipped: 3d_notch.zip <3d_notch.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_plate_thermal.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-"
"examples_3d_plate_thermal.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_plate_thermal.rst:24
msgid "Basic Thermal Analysis with PyMAPDL"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_plate_thermal.rst:26
msgid ""
"This example demonstrates how you can use MAPDL to create a plate, impose "
"thermal boundary conditions, solve, and plot it all within PyMAPDL."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_plate_thermal.rst:46
msgid "Geometry and Material Properties"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_plate_thermal.rst:47
msgid "Create a simple beam, specify the material properties, and mesh it."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_plate_thermal.rst:66
msgid "Set the thermal boundary conditions"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_plate_thermal.rst:85
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pressure_vessel.rst:115
msgid "Solve"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_plate_thermal.rst:86
msgid "Solve the thermal static analysis and print the results"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_plate_thermal.rst:102
msgid "Post-Processing using MAPDL"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_plate_thermal.rst:103
msgid ""
"View the thermal solution of the beam by getting the results directly "
"through MAPDL."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_plate_thermal.rst:118
msgid ""
"Alternatively you could also use the result object that reads in the result "
"file using pyansys"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_plate_thermal.rst:153
msgid ""
":download:`Download Jupyter notebook: 3d_plate_thermal.ipynb "
"<3d_plate_thermal.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_plate_thermal.rst:157
msgid ""
":download:`Download Python source code: 3d_plate_thermal.py "
"<3d_plate_thermal.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/3d_plate_thermal.rst:161
msgid ""
":download:`Download zipped: 3d_plate_thermal.zip <3d_plate_thermal.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/acoustic_analysis.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-"
"examples_acoustic_analysis.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/acoustic_analysis.rst:25
msgid "3D Acoustic Analysis"
msgstr "3D音響解析"

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/acoustic_analysis.rst:27
msgid ""
"This example shows how to perform an acoustic analysis using PyMAPDL and "
"``FLUID`` elements."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/acoustic_analysis.rst:32
msgid "Launch PyMAPDL"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/acoustic_analysis.rst:33
msgid "Launch PyMAPDL and load ``matplotlib``."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/acoustic_analysis.rst:53
msgid "Element and Material Properties"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/acoustic_analysis.rst:54
msgid "Define the ``FLUID30`` and ``FLUID130`` element types."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/acoustic_analysis.rst:79
msgid "Geometry Definition"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/acoustic_analysis.rst:80
msgid "Create a simple sphere."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/acoustic_analysis.rst:95
msgid "Geometry Meshing"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/acoustic_analysis.rst:96
msgid "First select the material and elements."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/acoustic_analysis.rst:112
msgid "Then choose the element size and perform the mesh."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/acoustic_analysis.rst:128
msgid ""
"Add surface boundary condition to the nodes using :func:`Mapdl.sf() "
"<ansys.mapdl.core.Mapdl.sf>` and the option ``SHLD`` for *Surface normal "
"velocity or acceleration*."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/acoustic_analysis.rst:148
msgid "Using :func:`Mapdl.solve() <ansys.mapdl.core.Mapdl.solve>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/acoustic_analysis.rst:175
msgid "Post1: Time step results"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/acoustic_analysis.rst:177
msgid "Listing the results"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/acoustic_analysis.rst:190
msgid "Post26: Time dependent results"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/acoustic_analysis.rst:192
msgid "Getting results for specific nodes"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/acoustic_analysis.rst:225
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:48
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:217
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/slashmap_cfx_mapping.rst:179
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/spotweld.rst:139
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/torsional_load.rst:251
msgid "Stop MAPDL"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/acoustic_analysis.rst:243
msgid ""
":download:`Download Jupyter notebook: acoustic_analysis.ipynb "
"<acoustic_analysis.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/acoustic_analysis.rst:247
msgid ""
":download:`Download Python source code: acoustic_analysis.py "
"<acoustic_analysis.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/acoustic_analysis.rst:251
msgid ""
":download:`Download zipped: acoustic_analysis.zip <acoustic_analysis.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-"
"examples_basic_dpf_example.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:24
msgid "Basic DPF-Core Usage with PyMAPDL"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:26
msgid ""
"This example is adapted from `Basic DPF-Core Usage Example "
"<https://dpf.docs.pyansys.com/version/stable/examples/00-basic/00-basic_example.html>`_"
" and it shows how to open a result file in `DPF "
"<https://dpf.docs.pyansys.com/>`_ and do some basic postprocessing."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:31
msgid ""
"If you have Ansys 2021 R1 installed, starting DPF is quite easy as DPF-Core "
"takes care of launching all the services that are required for "
"postprocessing Ansys files."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:35
msgid ""
"First, import the DPF-Core module as ``dpf_core`` and import the included "
"examples file."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:53
msgid "Create model"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:55
msgid "Running an example from the MAPDL verification manual"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:78
msgid ""
"Next, open the generated RST file and print out the :class:`Model "
"<ansys.dpf.core.model.Model>` object. The :class:`Model "
"<ansys.dpf.core.model.Model>` class helps to organize access methods for the"
" result by keeping track of the operators and data sources used by the "
"result file."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:85
msgid "Printing the model displays:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:87
msgid "Analysis type"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:88
msgid "Available results"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:89
msgid "Size of the mesh"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:90
msgid "Number of results"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:94
msgid ""
"If you are working with a remote server, you might need to upload the "
"``RST`` file before working with it. Then you can create the :class:`DPF "
"Model <ansys.dpf.core.model.Model>`."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:117
msgid "Model Metadata"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:118
msgid ""
"Specific metadata can be extracted from the model by referencing the model's"
" :attr:`metadata <ansys.dpf.core.model.Model.metadata>` property.  For "
"example, to print only the :attr:`result_info "
"<ansys.dpf.core.model.Metadata.result_info>`:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:134
msgid ""
"To print the :class:`mesh "
"region<ansys.dpf.core.meshed_region.MeshedRegion>`:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:146
msgid ""
"To print the time or frequency of the results use :class:`time_freq_support "
"<ansys.dpf.core.time_freq_support.TimeFreqSupport>`:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:160
msgid "Extracting Displacement Results"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:161
msgid ""
"All results of the model can be accessed through the :class:`Results "
"<ansys.dpf.core.results.Results>` property, which returns the "
":class:`ansys.dpf.core.results.Results` class. This class contains the DPF "
"result operators available to a specific result file, which are listed when "
"printing the object with ``print(results)``."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:167
msgid ""
"Here, the :class:`displacement "
"<ansys.dpf.core.operators.result.displacement.displacement>` operator is "
"connected with :class:`DataSources "
"<ansys.dpf.core.data_sources.DataSources>`, which takes place automatically "
"when running :class:`results.displacement() "
"<ansys.dpf.core.operators.result.displacement.displacement>`. By default, "
"the :class:`displacement "
"<ansys.dpf.core.operators.result.displacement.displacement>` operator is "
"connected to the first result set, which for this static result is the only "
"result."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:193
msgid "Plot displacements"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:195
msgid "You can plot the previous displacement field using:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:207
msgid "Or using"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:220
msgid ""
"This way is particularly useful if you have used "
":class:`ansys.dpf.core.scoping.Scoping` on the mesh or results."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:226
msgid "Close session"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:228
msgid "Stop MAPDL session."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:246
msgid ""
":download:`Download Jupyter notebook: basic_dpf_example.ipynb "
"<basic_dpf_example.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:250
msgid ""
":download:`Download Python source code: basic_dpf_example.py "
"<basic_dpf_example.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/basic_dpf_example.rst:254
msgid ""
":download:`Download zipped: basic_dpf_example.zip <basic_dpf_example.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-"
"examples_beam_with_report.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:26
msgid ""
"This file is complimentary material of `I-Beam Analysis with Automated "
"Report Generation <beam_analysis_report_example_>`_ example."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:30
msgid ""
"This example demonstrates a comprehensive structural analysis of a fully "
"constrained I-beam using PyMAPDL. The script creates a parameterized I-beam "
"model, applies loads, solves for structural response, and generates a "
"detailed engineering report in both Markdown and Microsoft Word formats."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:35
msgid "The example showcases:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:37
msgid "Parameterized I-beam geometry definition"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:38
msgid "Material property assignment"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:40
msgid "Distributed load application"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:41
msgid "Result extraction and post-processing"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:42
msgid "Automated report generation with plots and tables"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:44
msgid "This example requires the following imports:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:63
msgid "Workflow design"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:65
msgid ""
"The main function defines the workflow for creating the I-beam analysis and "
"generating reports."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:170
msgid "Generate and solve the finite element model"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:172
msgid ""
"A complete structural analysis of an I-beam is generated and solved. The "
"output is a dictionary with the desired results:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:175
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/spotweld.rst:69
msgid "Displacements"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:176
msgid "Bending moments"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:177
msgid "Bending stresses"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:178
msgid "Bending strains"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:180
msgid ""
"This model uses 20 BEAM188 elements to create the beam. The material "
"properties, load parameters and geometry are taken from the function inputs."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:423
msgid "Preparing plots"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:425
msgid ""
"The plots needs to be saved to a PNG and passed later to the report creation"
" functions."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:504
msgid "Generate Markdown report"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:506
msgid ""
"The following function uses a Markdown template to generate a Markdown file."
" You can customize the following function to accept a different template."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:663
msgid "Generate Word report"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:665
msgid ""
"Generate a simple Word report, with some tables and images to demonstrate "
"the reporting capabilities."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:668
msgid ""
"You need to have installed the library ``python-docx``. You can install it "
"with:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:888
msgid ""
":download:`Download Jupyter notebook: beam_with_report.ipynb "
"<beam_with_report.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:892
msgid ""
":download:`Download Python source code: beam_with_report.py "
"<beam_with_report.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/beam_with_report.rst:896
msgid ""
":download:`Download zipped: beam_with_report.zip <beam_with_report.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-"
"examples_bracket_static.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:26
msgid "Static analysis of a corner bracket"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:28
msgid ""
"This is an example adapted from a classic Ansys APDL tutorial `Static "
"Analysis of a Corner Bracket "
"<https://ansyshelp.ansys.com/account/Secured?returnurl=/Views/Secured/corp/v231/en/ans_tut/structural_cb.html>`_"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:33
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:85
msgid "Problem specification"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:36
msgid "Applicable Products:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:36
msgid "Ansys Multiphysics, Ansys Mechanical, Ansys Structural"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:38
msgid "Level of Difficulty:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:38
msgid "Easy"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:40
msgid "Interactive Time Required:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:40
msgid "60 to 90 minutes"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:42
msgid "Discipline:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:42
msgid "Structural"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:44
msgid "Analysis Type:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:44
msgid "Linear static"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:46
msgid "Element Types Used:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:46
msgid "`PLANE183 <elem_plane183_>`_"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:48
msgid "Features Demonstrated:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:48
msgid ""
"Solid modeling including primitives, boolean operations, and fillets; "
"tapered pressure load deformed shape and stress displays; listing of "
"reaction forces;"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:51
msgid "Help Resources:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:51
msgid "Structural Static Analysis and `PLANE183 <elem_plane183_>`_"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:58
msgid ""
"This is a simple, single-load-step, structural static analysis of a corner "
"angle bracket. The upper-left pin hole is constrained (welded) around its "
"entire circumference, and a tapered pressure load is applied to the bottom "
"of the lower-right pin hole. The US customary system of units is used. The "
"objective is to demonstrate how Mechanical APDL is typical used in an "
"analysis."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:65
msgid "Bracket model"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:67
msgid ""
"The dimensions of the corner bracket are shown in the following figure. The "
"bracket is made of A36 steel with a Young's modulus of :math:`3\\cdot 10^7` "
"psi and Poisson's ratio of :math:`0.27`."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:71
msgid "Bracket image"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:75
msgid "**Bracket model dimensions**"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:79
msgid "Approach and assumptions"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:81
msgid ""
"Because the bracket is thin in the z direction (1/2-inch thickness) compared"
" to its x and y dimensions, and because the pressure load acts only in the "
"x-y plane, assume plane stress for the analysis."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:85
msgid ""
"The approach is to use solid modeling to generate the 2D model and "
"automatically mesh it with nodes and elements. An alternative approach would"
" be to create the nodes and elements directly."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:92
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:87
msgid "Launching MAPDL"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:107
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:88
msgid "Build the geometry"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:110
msgid "Define rectangles"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:112
msgid ""
"There are several ways to create the model geometry within Mechanical APDL, "
"and some are more convenient than others. The first step is to recognize "
"that you can construct the bracket easily with combinations of rectangles "
"and circle primitives."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:116
msgid ""
"Select an arbitrary global origin location, and then define the rectangle "
"and circle primitives relative to that origin. For this analysis, use the "
"center of the upper-left hole. Begin by defining a rectangle relative to "
"that location."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:120
msgid ""
"The APDL command :meth:`mapdl.prep7() <ansys.mapdl.core.Mapdl.rectng>` is "
"used to create a rectangle with ``X1``, ``X2``, ``Y1``, and ``Y2`` "
"dimensions. In PyMAPDL the :class:`mapdl() <ansys.mapdl.core.Mapdl>` class "
"is used to call the APDL command."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:127
msgid "Dimension box 1"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:129
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:153
msgid "Enter the following:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:139
msgid "Or use a Python list to store the dimensions:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:152
msgid "Dimension box 2"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:165
msgid ""
"The :meth:`mapdl.prep7() <ansys.mapdl.core.Mapdl.prep7>` command starts the "
"APDL preprocessor to start the build up of the analysis. This is the "
"processor where the model geometry is created."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:179
msgid ""
"Parameterize as much as possible, taking advantage of Python features such "
"as the Python :class:`list <python.list>` or :class:`dict <python.dict>` "
"class. Good practice would be to have all parameters near or at the top of "
"the input file. However, for this interactive tutorial, they are inline."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:196
msgid ""
"In Python, you can use the ``*`` to unpack an object in a function call. For"
" example:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:211
msgid "Plot areas"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:213
msgid ""
"PyMAPDL plots can be controlled through arguments passed to the different "
"plot methods, such as :meth:`mapdl.aplot() <ansys.mapdl.core.Mapdl.aplot>`."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:216
msgid ""
"The area plot shows both rectangles, which are areas, in the same color. To "
"more clearly distinguish between areas, turn on area numbers. For more "
"information, see the :meth:`mapdl.aplot() <ansys.mapdl.core.Mapdl.aplot>` "
"method."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:234
msgid ""
"If you download the Jupyter Notebook version of `this example "
"<ref_static_analysis_bracket_end_>`_, you can take advantage of Jupyter "
"Notebook features. For example, you can right-click a command to display "
"contextual help."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:243
msgid "Create first circle"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:245
msgid ""
"With the use of logic and Boolean geometrical operations, you can use the "
"original geometric parameters (``box1``, ``box2``) to locate the circles."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:248
msgid ""
"Create the half circle at each end of the bracket. You first create a full "
"circle on each end and then combine the circles and rectangles with a "
"Boolean add operation (discussed in `Subtract pin holes from bracket`_)."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:252
msgid ""
"The APDL command to create the circles is :meth:`mapdl.cyl4() "
"<ansys.mapdl.core.Mapdl.cyl4>`."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:255
msgid ""
"The first circle area is located on the left side at the X,Y location, and "
"its radius is :math:`1`."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:276
msgid "Create second circle"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:278
msgid "Create the second circle at the X,Y location:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:292
msgid ""
"Use these parameter values to create the new area with the same radius of "
":math:`1` as the first circle area."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:308
msgid "Add areas"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:309
msgid ""
"Now that the appropriate pieces of the model (rectangles and circles) are "
"defined, add them together so the model becomes one continuous area. Use the"
" Boolean add operation :meth:`mapdl.aadd() <ansys.mapdl.core.Mapdl.aadd>` to"
" add the areas together."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:314
msgid "Use the ``all`` argument to add all areas."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:326
msgid "Create line fillet"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:328
msgid ""
"The right angle between the two boxes can be improved using a fillet with a "
"radius of :math:`0.4`. You can do this by selecting the lines around this "
"area and creating the fillet."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:332
msgid ""
"Use the APDL :meth:`mapdl.lsel() <ansys.mapdl.core.Mapdl.lsel>` method to "
"select lines. Here, the X and Y locations of the lines are used to create "
"the boxes for creating your selection."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:336
msgid ""
"After selecting the line, you need to write it to a parameter so you can use"
" it to generate the fillet line. This is done using the :meth:`mapdl.get() "
"<ansys.mapdl.core.Mapdl.get>` method."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:341
msgid ""
"Because you have selected one line, you can use the ``MAX`` and ``NUM`` "
"arguments for the :meth:`mapdl.get() <ansys.mapdl.core.Mapdl.get>` method."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:344
msgid "Select first line for fillet"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:357
msgid ""
"If you write the command to a Python parameter (``line1``), you can use "
"either the APDL parameter ``l1`` or the Python parameter ``line1`` when you "
"create the fillet line."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:361
msgid "Select second line for fillet and create Python parameter"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:373
msgid ""
"Once you have both lines selected, you can use the PyMAPDL command "
":meth:`mapdl.lfillt() <ansys.mapdl.core.Mapdl.lfillt>` to generate the "
"fillet between the lines."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:377
msgid ""
"**Note** that Python could return a list if more than one line is selected."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:381
msgid ""
"Here you use a mix of the APDL parameter as a string ``line1`` and the "
"``l2`` Python parameter to create the fillet line."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:384
msgid "Create fillet line using selected line (parameter names)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:401
msgid "Create fillet area"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:403
msgid ""
"To create the area delineated by ``line1``, ``line2``, and newly created "
"``line3``, use the :meth:`mapdl.al() <ansys.mapdl.core.Mapdl.al>` method. "
"The three lines are the input. If you select them all, you can use the "
"``'ALL'`` argument to create the area."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:408
msgid ""
"First you have to reselect the newly created lines in the fillet area. To do"
" this, you can use the ``fillet_radius`` parameter and the "
":meth:`mapdl.lsel() <ansys.mapdl.core.Mapdl.lsel>` command."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:412
msgid ""
"For the two newly created straight lines, the length is the same as the "
"``fillet_radius`` value. Thus, you can use the length argument with the "
":meth:`mapdl.lsel() <ansys.mapdl.core.Mapdl.lsel>` command."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:430
msgid ""
"Additionally, you need to get the fillet line itself (``line3``). You can "
"use the :meth:`mapdl.lsel() <ansys.mapdl.core.Mapdl.lsel>` command again "
"with either the ``'RADIUS'`` argument if there is only one line with that "
"radius in the model or more directly use the parameter name of the line. "
"Note the ``'A'`` to additionally select items."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:449
msgid ""
"Then use :meth:`mapdl.al() <ansys.mapdl.core.Mapdl.al>` command to create "
"the areas from the lines."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:466
msgid "Add areas together"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:467
msgid ""
"Append all areas again using the :meth:`mapdl.aadd() "
"<ansys.mapdl.core.Mapdl.aadd>` method. Because you have only the two areas "
"to combine, use the ``'ALL'`` argument."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:485
msgid "Create first pin hole"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:487
msgid ""
"The first pin hole is located at the left side of the first box. Thus, you "
"can use the box dimensions to locate your new circle."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:490
msgid ""
"The X value (center) of the pin hole is at the first coordinate of the "
"``box1`` (``X1``). The Y value is the average of the two ``box1`` Y values:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:509
msgid "Because you have two pin hole circles, you use the command twice."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:512
msgid ""
"Some of these areas are set to parameters to use later in the analysis. This"
" allows you to use the lines to create the areas with the "
":meth:`mapdl.asll() <ansys.mapdl.core.Mapdl.asll>` command."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:519
msgid "Create second pin hole"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:521
msgid ""
"The second pin hole is located at the bottom of the second box, so again we "
"can use the box 2 dimensions to locate the circle. For this pinhole the "
"dimensions are:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:539
msgid "Subtract pin holes from bracket"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:541
msgid ""
"If you use the :meth:`mapdl.aplot() <ansys.mapdl.core.Mapdl.aplot>` command "
"with lines, at this point, you have created two circle areas overlapping the"
" bracket. You can use the :meth:`mapdl.asba() <ansys.mapdl.core.Mapdl.asba>`"
" command, which is the Boolean command to subtract areas, to remove the "
"circles from the bracket."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:561
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:89
msgid "Model definition"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:564
msgid "Define material properties"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:565
msgid ""
"There is only one material property to define for the bracket, A36 Steel, "
"with given values for the Young's modulus of elasticity and Poisson's ratio."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:580
msgid ""
"Use the :meth:`mapdl.mp() <ansys.mapdl.core.Mapdl.mp>` command to define "
"material properties in PyMAPDL."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:597
msgid "Define element types and options"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:599
msgid ""
"You use the :meth:`mapdl.et() <ansys.mapdl.core.Mapdl.et>` command to select"
" an element ."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:601
msgid ""
"In any analysis, you select elements from a library of element types and "
"define the appropriate ones for the analysis. In this case, only one element"
" type is used: `PLANE183 <elem_plane183_>`_, a 2D, quadratic, structural, "
"higher-order element."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:606
msgid ""
"A higher-order element enables you to have a coarser mesh than with lower-"
"order elements while still maintaining solution accuracy. Also, Mechanical "
"APDL generates some triangle-shaped elements in the mesh that would "
"otherwise be inaccurate when using lower-order elements."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:613
msgid "Options for `PLANE183`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:615
msgid ""
"Specify plane stress with thickness as an option for `PLANE183 "
"<elem_plane183_>`_. (Thickness is defined as a real constant in `Define real"
" constants`_). Select plane stress with the thickness option for the element"
" behavior. The thickness option is set using the element keyoption 3.  For "
"more information, see the `PLANE183 <elem_plane183_>`_ element definition in"
" the Ansys Help."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:635
msgid "Define real constants"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:637
msgid ""
"Assuming plane stress with thickness, enter the thickness as a real constant"
" for `PLANE183 <elem_plane183_>`_:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:640
msgid ""
"You use the :meth:`mapdl.r() <ansys.mapdl.core.Mapdl.r>` command to set real"
" constants."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:658
msgid ""
"You can mesh the model without specifying mesh-size controls. If you are "
"unsure of how to determine mesh density, you can allow Mechanical APDL to "
"apply a default mesh. For this model, however, you want to specify a global "
"element size to control overall mesh density. Set global size control using "
"the :meth:`mapdl.esize() <ansys.mapdl.core.Mapdl.esize>` command. Set a size"
" of :math:`0.5` or a slightly smaller value to improve the mesh."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:665
msgid ""
"Mesh the areas using the :meth:`mapdl.amesh() "
"<ansys.mapdl.core.Mapdl.amesh>` command. Your mesh may vary slightly from "
"the mesh shown. You may see slightly different results during "
"postprocessing."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:669
msgid ""
"Now you can use the :meth:`mapdl.eplot() <ansys.mapdl.core.Mapdl.eplot>` "
"command to see the mesh."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:691
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:45
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:91
msgid "Boundary conditions"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:693
msgid ""
"Loading is considered part of the :meth:`mapdl.solu() "
"<ansys.mapdl.core.Mapdl.solu>` command or the solution processor in APDL. "
"But it can be also done in the preprocessor with :meth:`mapdl.prep7() "
"<ansys.mapdl.core.Mapdl.prep7>` command."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:698
msgid ""
"You can activate the solution processor by calling the "
":class:`mapdl.solution() <ansys.mapdl.core.solution.Solution>` class, by "
"using the :meth:`mapdl.slashsolu() <ansys.mapdl.core.Mapdl.slashsolu>` "
"command, or by using :meth:`mapdl.run(\"/solu\") "
"<ansys.mapdl.core.Mapdl.run>` to call the APDL ``/SOLU`` command."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:716
msgid ""
"Set the analysis type with the :meth:`mapdl.antype() "
"<ansys.mapdl.core.Mapdl.antype>` command."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:730
msgid "Apply displacement constraints"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:731
msgid ""
"This is where you add boundary conditions to the model. First, you want to "
"fix the model by setting a zero displacement at the first pin hole. You can "
"apply displacement constraints directly to lines."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:735
msgid ""
"To do this without the graphical interface, you would need to replot the "
"lines. Or you can use Booleans and generate the lines from the pin hole "
"locations/box parameters. By using the parameters that you have created, you"
" can select the lines and fix one end of the bracket."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:741
msgid ""
"Pick the four lines around the left-hand hole using the :meth:`mapdl.lsel() "
"<ansys.mapdl.core.Mapdl.lsel>` command and the ``pinehole1`` parameters."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:759
msgid ""
"Then for loading, select and apply the boundary condition to the nodes "
"attached to those lines using the :meth:`mapdl.nsll() "
"<ansys.mapdl.core.Mapdl.nsll>` command."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:773
msgid ""
"Next use the :meth:`mapdl.d() <ansys.mapdl.core.Mapdl.d>` command to set the"
" displacement to zero (fixed constraint)."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:792
msgid "Apply pressure load"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:794
msgid ""
"Apply the tapered pressure load to the bottom-right pin hole. In this case, "
"tapered means varying linearly. When a circle is created in Mechanical APDL,"
" four lines define the perimeter; therefore, apply the pressure to two lines"
" making up the lower half of the circle. Because the pressure tapers from a "
"maximum value (500 psi) at the bottom of the circle to a minimum value (50 "
"psi) at the sides, apply pressure in two separate steps, with reverse "
"tapering values for each line."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:814
msgid ""
"The Mechanical APDL convention for pressure loading is that a positive load "
"value represents pressure into the surface (compressive)."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:817
msgid ""
"To pick the line, use the same :meth:`mapdl.lsel() "
"<ansys.mapdl.core.Mapdl.lsel>` command used in the previous cell block and "
"then convert the lines to a nodal selection with the :meth:`mapdl.nsel() "
"<ansys.mapdl.core.Mapdl.nsel>` command."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:822
msgid ""
"Note we have a slightly more complicated picking procedure for the two "
"quarters of the full circle. A method to select the lines would be to select"
" the lower half of the second pinhole circle."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:837
msgid ""
"Now repick from that selection the lines that are less than the X center of "
"that pin hole."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:851
msgid ""
"Once you have the correct line, use the :meth:`mapdl.sf() "
"<ansys.mapdl.core.Mapdl.sf>` command to load the line with the varying "
"surface load."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:868
msgid "Repeat the procedure for the second pin hole."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:891
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/torsional_load.rst:146
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:92
msgid "Solution"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:893
msgid ""
"To solve an Ansys FE analysis, the solution processor must be activated, "
"using the :class:`mapdl.solution() <ansys.mapdl.core.solution.Solution>` "
"class or the :meth:`mapdl.slashsolu() <ansys.mapdl.core.Mapdl.slashsolu>` "
"command. This was done a few steps earlier."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:898
msgid ""
"The model is ready to be solved using the :meth:`mapdl.solve() "
"<ansys.mapdl.core.Mapdl.solve>` command."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:914
msgid ""
"Mechanical APDL stores the results of this single-load-step problem in the "
"database and in the results file, :file:`Jobname.RST` (or "
":file:`Jobname.RTH` for thermal or :file:`Jobname.RMG` for magnetic). The "
"database can contain only one set of results at any given time, so in a "
"multiple-load-step or multiple-substep analysis, Mechanical APDL stores only"
" the final solution in the database."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:921
msgid "Mechanical APDL stores all solutions in the results file."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:924
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:93
msgid "Review the results"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:926
msgid "This step represents the beginning of the postprocessing phase."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:928
msgid ""
"The results you see may vary slightly from what is shown due to variations "
"in the mesh."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:931
msgid "Enter the postprocessor"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:932
msgid ""
"The Ansys APDL postprocessor is a separate processor called with the "
":meth:`mapdl.post1() <ansys.mapdl.core.Mapdl.post1>` command."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:947
msgid "Plot the deformed shape"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:948
msgid ""
"Here :class:`mapdl.result <ansys.mapdl.core.Mapdl.result>` is used to "
"retrieve the results and for plotting."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:973
msgid "Plot the von Mises equivalent stress"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:975
msgid ""
"You can also generate stress plots using the "
":meth:`mapdl.plot_principal_nodal_stress() "
"<ansys.mapdl.core.Mapdl.plot_principal_nodal_stress>` command."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:998
msgid "Obtain von Mises stresses."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:1016
msgid "List reaction solution"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:1018
msgid ""
"To list the FY reactions forces use the APDL :meth:`mapdl.prrsol() "
"<ansys.mapdl.core.Mapdl.prrsol>` command which print the constrained node "
"reaction solution."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:1022
msgid ""
"You can use the :meth:`to_dataframe "
"<ansys.mapdl.core.commands.CommandListingOutput>` command to convert the "
"output to a dataframe for more static print:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:1037
msgid ""
"The values shown are representative and may vary from the values that you "
"obtain. Many other options are available for reviewing results in the "
"general postprocessor. You can see some of these other options in other "
"tutorials, such. as the `Ansys tutorial guide <ansys_tutorials_guide_>`_."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:1045
msgid "Exit Mechanical APDL"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:1046
msgid "Exit Mechanical APDL once you have finished."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:1071
msgid ""
":download:`Download Jupyter notebook: bracket_static.ipynb "
"<bracket_static.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:1075
msgid ""
":download:`Download Python source code: bracket_static.py "
"<bracket_static.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/bracket_static.rst:1079
msgid ":download:`Download zipped: bracket_static.zip <bracket_static.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-"
"examples_composite_dcb.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:25
msgid "Static simulation of double cantilever beam test via cohesive elements"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:27
msgid ""
"This example is a classic double cantilever beam test commonly used to study"
" mode I interfacial delamination of composite plates."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:36
msgid ""
"This example shows how to use PyMAPDL to simulate delamination in composite "
"materials. PyDPF modules are also used for the postprocessing of the "
"results."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:40
msgid "Problem figure"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:42
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:50
msgid "DCB experimental test setup"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:47
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:55
msgid "**Source**: https://www.wikiwand.com/en/Delamination"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:59
msgid "Launch the MAPDL instance."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:60
msgid "Set up the model."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:61
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:338
msgid "Solve the model."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:62
msgid "Plot results using PyMAPDL."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:63
msgid "Plot results using PyDPF."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:64
msgid "Plot reaction force."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:67
msgid "Additional packages"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:68
msgid ""
"These additional packages are imported for use: * - `Matplotlib "
"<https://matplotlib.org>`_ for plotting * - `Pandas "
"<https://pandas.pydata.org/>`_ for data analysis and manipulation"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:75
msgid "Start MAPDL as a service"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:76
msgid ""
"This example begins by importing the required packages and then launching "
"Ansys Mechanical APDL."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:100
msgid "Set geometrical inputs"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:101
msgid "Set geometrical inputs for the model."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:119
msgid "Set up the model"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:120
msgid ""
"Set up the model by choosing the units system and the element types for the "
"simulations. Because a fully 3D approach is chosen for this example, "
"``SOLID186`` elements are used for meshing volumes, and ``TARGE170`` and "
"``CONTA174`` are used for modelling cohesive elements in between contact "
"surfaces."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:128
msgid "Define material parameters"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:129
msgid ""
"Composite plates are modelled using homogeneous linear elastic orthotropic "
"properties, whereas a bilinear cohesive law is used for cohesive elements."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:162
msgid "Create the geometry in the model and meshing"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:163
msgid ""
"The two plates are generated as two parallelepipeds. Composite material "
"properties and the three-dimensional elements are then assigned."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:190
msgid "Generate cohesive elements in between the contact surfaces"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:191
msgid ""
"The generation of cohesive elements is the most delicate part of the "
"modelling approach. First, the two contact surfaces are identified and "
"defined as a components (in this case `cm_1` and `cm_2` respectively). Then,"
" the real constants for the ``CONTA174`` and ``TARGE170`` elements and their"
" key options are set to capture the correct behavior. Descriptions for each "
"of these parameters can be found in the Ansys element documentation. "
"Finally, elements are generated on top of the respective surfaces `cm_1` and"
" `cm_2`."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:263
msgid "Generate boundary conditions"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:264
msgid ""
"Assign boundary conditions to replicate the real test conditions. One end of"
" the two composite plates is fixed against translation along the x, y, and z"
" axis. On the opposite side of the plate, displacement conditions are "
"applied to simulate the interfacial crack opening. These conditions are "
"applied to the top and bottom nodes corresponding to the geometrical edges "
"located respectively at these (x, y, z) coordinates:, ``(0.0, `y`, 0.0)`` "
"and ``(0.0, `y`, 3.4)``. Two different components are assigned to these sets"
" of nodes for a faster identification of the nodes bearing reaction forces."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:324
msgid "Solve the non-linear static analysis"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:326
msgid ""
"Run a non-linear static analysis. To have smooth crack opening progression "
"and facilitate convergency for the static solver, request 100 substeps."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:358
msgid "Use PyMAPDL and PyDPF for postprocessing."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:362
msgid "Postprocess results using PyMAPDL"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:363
msgid ""
"This section shows how to use PyMAPDL to postprocess results. Because "
"measuring the delamination length is important, plot the cohesive damage "
"parameter. Although the damage parameter is an element parameter, the result"
" is provided in terms of a nodal result. Thus, the result for just one of "
"the four-noded cohesive element ``NMISC = 70`` is presented. The result for "
"the other nodes are present at ``NMISC = 71,72,73``. You can retrieve the "
"actual damage parameter nodal values from the solved model in form of a "
"table (or an array)."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:403
msgid "Postprocessing results using PyDPF"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:404
msgid ""
"Use PyDPF to visualize the crack opening throughout the simulation as an "
"animation."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:517
msgid "Plot the reaction force at the bottom nodes"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:553
msgid "Animate results using PyDPF with .animate() method"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:554
msgid ""
"Use PyDPF method :func:`FieldsContainer.animate() "
"<ansys.dpf.core.fields_container.FieldsContainer.animate>` to visualize the "
"crack opening throughout the simulation as an animation."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:572
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_static.rst:148
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:470
msgid "Exit MAPDL"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:589
msgid ""
":download:`Download Jupyter notebook: composite_dcb.ipynb "
"<composite_dcb.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:593
msgid ""
":download:`Download Python source code: composite_dcb.py <composite_dcb.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/composite_dcb.rst:597
msgid ":download:`Download zipped: composite_dcb.zip <composite_dcb.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/contact_elements.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-"
"examples_contact_elements.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/contact_elements.rst:24
msgid "Contact Element Example"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/contact_elements.rst:26
msgid ""
"This example demonstrates how to create contact elements for general "
"contact."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/contact_elements.rst:29
msgid "Begin by launching MAPDL."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/contact_elements.rst:42
msgid ""
"Enter the pre-processor, create a block and mesh it with tetrahedral "
"elements."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/contact_elements.rst:63
msgid ""
"Second a volume block above the existing block and mesh it with quadratic "
"hexahedral elements.  Ensure that these blocks do not touch by starting it "
"slightly higher than the existing block."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/contact_elements.rst:67
msgid "Note how these two blocks do not touch and the mesh is non-conformal."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/contact_elements.rst:85
msgid ""
"Select all the elements at the intersection between the two blocks and "
"generate contact elements."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/contact_elements.rst:101
msgid ""
"Plot the contact element pairs.  Note from the command output above that the"
" section IDs are 5 and 6."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/contact_elements.rst:104
msgid ""
"Here, we plot the element mesh as a wire-frame to show that the contact "
"pairs overlap."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/contact_elements.rst:137
msgid ""
":download:`Download Jupyter notebook: contact_elements.ipynb "
"<contact_elements.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/contact_elements.rst:141
msgid ""
":download:`Download Python source code: contact_elements.py "
"<contact_elements.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/contact_elements.rst:145
msgid ""
":download:`Download zipped: contact_elements.zip <contact_elements.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-"
"examples_cyclic_analysis.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:24
msgid "Cyclic Analysis"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:26
msgid ""
"This example creates a bladed disc using parametric geometry of a cyclic "
"sector and then runs a modal analysis on that cyclic sector. We then post-"
"process the results using the legacy `MAPDL reader "
"<https://readerdocs.pyansys.com/>`_ and finally generate another cyclic "
"model using our parametric modeler."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:31
msgid "Our first task is to create a simple cyclic model with 7 sectors."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:54
msgid "Create the Cyclic Sector"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:55
msgid "Create a single \"sector\" of our cyclic model."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:136
msgid "Make the Model Cyclic"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:137
msgid "Make the model cyclic by running :func:`Mapdl.cyclic`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:139
msgid "Note how the number of sectors matches"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:155
msgid "Generate the mesh"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:156
msgid ""
"Generate the finite element mesh using quadritic hexahedrals, SOLID186."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:178
msgid "Apply Material Properties"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:198
msgid "Run the Modal Analysis"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:199
msgid ""
"Let's get the first 10 modes. Note that this will actually compute "
"``(sectors/2)*nmode`` based on the cyclic boundary conditions."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:215
msgid "Get the Results of the Cyclic Modal Analysis"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:216
msgid "Visualize a traveling wave from the modal analysis."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:218
msgid ""
"For more details, see `Validation of a Modal Work Approach for Forced "
"Response Analysis of Bladed Disks "
"<https://www.mdpi.com/2076-3417/11/12/5437/pdf>`_, or the `Cyclic Symmetry "
"Analysis Guide "
"<https://ansyshelp.ansys.com/Views/Secured/corp/v222/en/pdf/Ansys_Mechanical_APDL_Cyclic_Symmetry_Analysis_Guide.pdf>`_"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:225
msgid ""
"This uses the legacy result reader, which will be deprecated at some point "
"in favor of DPF, but we can use this for now for some great animations."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:228
msgid ""
"For more details regarding cyclic result post processing, see: - "
"`Understanding Nodal Diameters from a Cyclic Model Analysis "
"<https://reader.docs.pyansys.com/version/stable/examples/01-cyclic_results/academic_sector_nd.html>`_"
" - `Cyclic symmetry examples "
"<https://dpf.docs.pyansys.com/version/stable/examples/11-cyclic-"
"symmetry/index.html>`_"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:246
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:362
msgid "List the Table of Harmonic Indices"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:247
msgid ""
"This is the table of harmonic indices. This table provides the corresponding"
" harmonic index for each cumulative mode."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:263
msgid "Generate an Animation of a Traveling Wave"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:264
msgid "Here's the nodal diameter 1 of first bend on our cyclic analysis."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:266
msgid ""
"We can get the first mode (generally first bend for a bladed rotor) for "
"nodal diameter 1 with:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:269
msgid "``mode_num = np.nonzero(result.harmonic_indices == 1)[0][0]``"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:294
msgid "And here's 1st torsional for nodal diameter 3."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:318
msgid "Parametric Geometry"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:319
msgid ""
"Since our geometry creation is scripted, we can create a structure with any "
"number of \"sectors\". Let's make a more interesting one with 20 sectors."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:322
msgid "First, be sure to clear MAPDL so we start from scratch."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:363
msgid ""
"Note how the harmonic indices of these modes goes up to 10, or N/2 where N "
"is the number of sectors."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:380
msgid "Plot First Bend for Nodal Diameter 2"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:381
msgid ""
"Note how you can clearly see two nodal lines for this mode shape since it's "
"nodal diameter 2."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:398
msgid "Animate First Bend for Nodal Diameter 2"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:399
msgid ""
"Let's end this example by animating mode 12, which corresponds to first bend"
" for the 2nd nodal diameter of this example model."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:428
msgid ""
":download:`Download Jupyter notebook: cyclic_analysis.ipynb "
"<cyclic_analysis.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:432
msgid ""
":download:`Download Python source code: cyclic_analysis.py "
"<cyclic_analysis.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_analysis.rst:436
msgid ":download:`Download zipped: cyclic_analysis.zip <cyclic_analysis.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_static.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-"
"examples_cyclic_static.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_static.rst:24
msgid "Static Cyclic Analysis"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_static.rst:26
msgid ""
"Run a static cyclic analysis of an example rotor sector using the imperial "
"unit system at 1000 RPM."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_static.rst:45
msgid "Load in the mesh"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_static.rst:46
msgid "Load in the example sector and plot it."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_static.rst:60
msgid "Make the rotor cyclic"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_static.rst:61
msgid "Enter the preprocessing routine and make the mesh cyclic."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_static.rst:79
msgid ""
"Units are in imperial units and the material is (approximately) structural "
"steel."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_static.rst:95
msgid "Apply boundary conditions"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_static.rst:96
msgid ""
"Apply a cyclic rotation at 1000 RPM and constrain the rotor at the center."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_static.rst:116
msgid "Run a static analysis"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_static.rst:117
msgid "Run the MAPDL solver and print the output of the solution."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_static.rst:134
msgid "Plot the cyclic result"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_static.rst:135
msgid "Plot the result using the legacy"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_static.rst:149
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:668
msgid "Finally, exit MAPDL."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_static.rst:166
msgid ""
":download:`Download Jupyter notebook: cyclic_static.ipynb "
"<cyclic_static.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_static.rst:170
msgid ""
":download:`Download Python source code: cyclic_static.py <cyclic_static.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/cyclic_static.rst:174
msgid ":download:`Download zipped: cyclic_static.zip <cyclic_static.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/exhaust_manifold_thermal_stress.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-"
"examples_exhaust_manifold_thermal_stress.py>` to download the full example "
"code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/exhaust_manifold_thermal_stress.rst:25
msgid "Thermal-structural analysis of exhaust manifold"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/exhaust_manifold_thermal_stress.rst:27
msgid ""
"This example illustrates how to map results from a CFD analysis and perform "
"a Finite Element (FE) analysis."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/exhaust_manifold_thermal_stress.rst:32
msgid ""
"In this example, we will perform an FE analysis to compute the thermal "
"stresses developed in an exhaust manifold. The manifold is made of "
"structural steel and the temperature distribution in it is obtained from a "
"CFD run. We import this data and map it onto FE mesh to define thermal load "
"at each node using Gaussian interpolation kernel."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/exhaust_manifold_thermal_stress.rst:34
msgid "Exhaust Manifold CFD Results"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/exhaust_manifold_thermal_stress.rst:42
msgid "Import geometry, assign material properties, and generate FE mesh."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/exhaust_manifold_thermal_stress.rst:43
msgid "Import temperature distribution and map it on FE mesh"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/exhaust_manifold_thermal_stress.rst:44
msgid ""
"Define BCs and use imported temperature distribution to define thermal load."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/exhaust_manifold_thermal_stress.rst:45
msgid "Solve the model and plot the results of interest."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/exhaust_manifold_thermal_stress.rst:48
msgid "Additional Packages used"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/exhaust_manifold_thermal_stress.rst:49
msgid "`Numpy <numpy_org_>`_ for using data as arrays"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/exhaust_manifold_thermal_stress.rst:50
msgid ""
"`Pandas <pandas_org_>`_ to import csv file (to install use: **pip install "
"pandas**)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/exhaust_manifold_thermal_stress.rst:51
msgid "`PyVista <pyvista_docs_>`_ for performing Gaussian interpolation"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/exhaust_manifold_thermal_stress.rst:55
msgid "Highlighted faces are fully constrained."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/exhaust_manifold_thermal_stress.rst:57
msgid "Boundary Conditions used for FE Analysis"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/exhaust_manifold_thermal_stress.rst:65
msgid "Import all necessary modules and launch an instance of MAPDL"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/exhaust_manifold_thermal_stress.rst:87
msgid "Import geometry, assign material properties and generate a mesh."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/exhaust_manifold_thermal_stress.rst:128
msgid "Import and map temperature data to FE mesh"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/exhaust_manifold_thermal_stress.rst:166
msgid "Apply loads and boundary conditions and solve the model"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/exhaust_manifold_thermal_stress.rst:205
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:47
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:308
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/torsional_load.rst:176
msgid "Post-processing"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/exhaust_manifold_thermal_stress.rst:221
msgid "Exit MAPDL instance"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/exhaust_manifold_thermal_stress.rst:239
msgid ""
":download:`Download Jupyter notebook: exhaust_manifold_thermal_stress.ipynb "
"<exhaust_manifold_thermal_stress.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/exhaust_manifold_thermal_stress.rst:243
msgid ""
":download:`Download Python source code: exhaust_manifold_thermal_stress.py "
"<exhaust_manifold_thermal_stress.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/exhaust_manifold_thermal_stress.rst:247
msgid ""
":download:`Download zipped: exhaust_manifold_thermal_stress.zip "
"<exhaust_manifold_thermal_stress.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/geometry.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-"
"examples_geometry.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/geometry.rst:24
msgid "Plotting and Mesh Access"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/geometry.rst:26
msgid "PyMAPDL can load basic IGES geometry for analysis."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/geometry.rst:28
msgid ""
"This example demonstrates loading basic geometry into MAPDL for analysis and"
" demonstrates how to use the built-in Python specific plotting "
"functionality."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/geometry.rst:32
msgid ""
"This example also demonstrates some of the more advanced features of PyMAPDL"
" including direct mesh access through VTK."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/geometry.rst:53
msgid "Load Geometry"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/geometry.rst:54
msgid ""
"Here we download a simple example bracket IGES file and load it into MAPDL."
"  Since ``igesin`` must be in the AUX15 process"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/geometry.rst:75
msgid "Plotting"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/geometry.rst:76
msgid ""
"PyMAPDL uses VTK and pyvista as a plotting backend to enable remotable (with"
" 2021R1 and newer) interactive plotting.  The common plotting methods "
"(``kplot``, ``lplot``, ``aplot``, ``eplot``, etc.) all have compatible "
"commands that use the "
":class:`ansys.mapdl.core.plotting.visualizer.MapdlPlotter` class.  You can "
"configure this method with a variety of keyword arguments.  For example:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/geometry.rst:103
msgid ""
"You can also configure a theme to enable consistent plotting across multiple"
" plots.  These theme parameters override any unset keyword arguments.  For "
"example:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/geometry.rst:125
msgid "Accessesing Element and Nodes Pythonically"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/geometry.rst:126
msgid ""
"PyMAPDL also supports element and nodal plotting using ``eplot`` and "
"``nplot``.  First, mesh the bracket using SOLID187 elements.  These are well"
" suited to this geometry and the static structural analyses."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/geometry.rst:148
msgid ""
"You can access the underlying finite element mesh as a VTK grid through the "
"``mesh.grid`` attribute."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/geometry.rst:163
msgid ""
"This UnstructuredGrid contains a powerful API, including the ability to "
"access the nodes, elements, original node numbers, all with the ability to "
"plot the mesh and add new attributes and data to the grid."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/geometry.rst:179
msgid "cell representation in VTK format"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/geometry.rst:192
msgid "Obtain node numbers of the grid"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/geometry.rst:205
msgid "Save arbitrary data to the grid"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/geometry.rst:220
msgid ""
"Plot this mesh with scalars of your choosing.  You can apply the same "
"MapdlTheme when plotting as it's compatible with the grid plotter."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/geometry.rst:244
msgid ""
"This grid can be also saved to disk in the compact cross-platform VTK format"
" and loaded again with ``pyvista`` or ParaView."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/geometry.rst:247
msgid "..code:: pycon"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/geometry.rst:274
msgid ":download:`Download Jupyter notebook: geometry.ipynb <geometry.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/geometry.rst:278
msgid ":download:`Download Python source code: geometry.py <geometry.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/geometry.rst:282
msgid ":download:`Download zipped: geometry.zip <geometry.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:6
#: ../../pymapdl/doc/source/examples/index.rst:31
msgid "Full examples using PyMAPDL"
msgstr "PyMAPDL を使用した完全な例"

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:7
#: ../../pymapdl/doc/source/examples/index.rst:36
msgid "These examples demonstrate full examples using the PyMAPDL module."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:26
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_2d_magnetostatic_solenoid-BodyFlux_Averaging.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_2d_magnetostatic_solenoid-BodyFlux_Averaging.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:43
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_2d_plate_with_a_hole.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_2d_plate_with_a_hole.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:60
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_2d_pressure_vessel.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_2d_pressure_vessel.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:77
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_3d_notch.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_3d_notch.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:94
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_3d_plate_thermal.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_3d_plate_thermal.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:111
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_acoustic_analysis.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_acoustic_analysis.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:128
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_basic_dpf_example.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_basic_dpf_example.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:145
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_beam_with_report.py`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:162
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_bracket_static.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_bracket_static.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:179
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_composite_dcb.py`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:196
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_contact_elements.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_contact_elements.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:213
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_cyclic_analysis.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_cyclic_analysis.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:230
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_cyclic_static.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_cyclic_static.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:247
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_exhaust_manifold_thermal_stress.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_exhaust_manifold_thermal_stress.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:264
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_geometry.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_geometry.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:281
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_lathe_cutter.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_lathe_cutter.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:298
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_mapdl_3d_beam.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_mapdl_3d_beam.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:315
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_mapdl_beam.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_mapdl_beam.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:332
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_modal_beam.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_modal_beam.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:349
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_path_operations.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_path_operations.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:366
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_pressure_vessel.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_pressure_vessel.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:383
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_psd-vm203.py`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:400
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_pyvista_mesh.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_pyvista_mesh.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:417
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_slashmap_cfx_mapping.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_slashmap_cfx_mapping.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:434
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_spotweld.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_spotweld.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:451
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_torsional_load.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_torsional_load.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/index.rst:468
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_transient_thermal.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_transient_thermal.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-"
"examples_lathe_cutter.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:25
msgid "Structural Analysis of a Lathe Cutter"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:27
msgid "Basic walk through PyMAPDL capabilities."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:32
msgid ""
"The objective of this example is to highlight some regularly used PyMAPDL "
"features via a lathe cutter finite element model. Lathe cutters have "
"multiple avenues of wear and failure, and the analyses supporting their "
"design would most often be transient thermal-structural. However, for "
"simplicity, this simulation example uses a non-uniform load."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:39
msgid "Lathe cutter geometry and load description."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:45
msgid "**Figure 1: Lathe cutter geometry and load description.**"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:50
msgid "Contents"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:52
msgid "**Variables and launch** Define necessary variables and launch MAPDL."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:55
msgid ""
"**Geometry, mesh, and MAPDL parameters** Import geometry and inspect for "
"MAPDL parameters. Define linear elastic material model with Python "
"variables. Mesh and apply symmetry boundary conditions."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:60
msgid ""
"**Coordinate system and load** Create a local coordinate system for the "
"applied load and verify with a plot."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:64
msgid ""
"**Pressure load** Define the pressure load as a sine function of the length "
"of the application area using numpy arrays. Import the pressure array into "
"MAPDL as a table array. Verify the applied load and solve."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:69
msgid ""
"**Plotting** Show result plotting, plotting with selection, and working with"
" the plot legend."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:73
msgid ""
"**Postprocessing:** List a result two ways: use PyMAPDL and the Pythonic "
"version of APDL. Demonstrate extended methods and writing a list to a file."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:77
msgid ""
"**Advanced plotting** Use of :class:`pyvista.UnstructuredGrid` for "
"additional postprocessing."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:83
msgid "Step 1: Variables and launch"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:85
msgid "Define variables and launch MAPDL."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:109
msgid ""
"Often used MAPDL command line options are exposed as Pythonic parameter "
"names in :func:`ansys.mapdl.core.launcher.launch_mapdl`. For example, "
"``-dir`` has become ``run_location``. You could use ``run_location`` to "
"specify the MAPDL run location. For example:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:118
msgid ""
"Otherwise, the MAPDL working directory is stored in ``mapdl.directory``. In "
"this directory, MAPDL will create some of the images we will show later."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:121
msgid ""
"Options without a Pythonic version can be accessed by the "
"``additional_switches`` parameter. Here ``-smp`` is used only to keep the "
"number of solver files to a minimum."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:136
msgid "Step 2: Geometry, mesh, and MAPDL parameters"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:138
msgid "Import geometry and inspect for MAPDL parameters."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:139
msgid "Define material and mesh, and then create boundary conditions."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:153
msgid "Import the geometry file and list any MAPDL parameters."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:167
msgid "Use pressure area per length in the load definition."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:180
msgid "Change the units and title."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:192
msgid "Set material properties."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:205
msgid ""
"The MAPDL element type ``SOLID285`` is used for demonstration purposes. "
"Consider using an appropriate element type or mesh density for your actual "
"application."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:228
msgid "Step 3: Coordinate system and load"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:230
msgid ""
"Create a local Coordinate System (CS) for the applied pressure as a function"
" of local X."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:233
msgid "Local CS ID is 11"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:254
msgid ""
"VTK plots do not show MAPDL plot symbols. However, to use MAPDL plotting "
"capabilities, you can set the keyword option ``backend`` to "
"``GraphicsBackend.MAPDL``."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:269
msgid "Step 4: Pressure load"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:271
msgid ""
"Create a pressure load, load it into MAPDL as a table array, verify the "
"load, and solve."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:292
msgid ""
"``length_x`` and ``press`` are vectors. To combine them into the correct "
"form needed to define the MAPDL table array, you can use `numpy.stack "
"<https://numpy.org/doc/stable/reference/generated/numpy.stack.html>`_."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:312
msgid "You can open the MAPDL GUI to check the model."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:322
msgid "Set up the solution."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:353
msgid "Step 5: Plotting"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:371
msgid "Plotting - Part of Model"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:391
msgid "Plotting - Legend Options"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:419
msgid ""
"Let's try out some scalar bar options from the `PyVista documentation "
"<pyvista_docs_>`_. For example, let's set black text on a beige background."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:423
msgid ""
"The scalar bar keywords defined as a Python dictionary are an alternate "
"method to using {key:value}'s. You can use the click-and drag method to "
"reposition the scalar bar. Left-click it and hold down the left mouse button"
" while moving the mouse."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:464
msgid "Step 6: Postprocessing"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:467
msgid "Results List"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:469
msgid "Get all principal nodal stresses."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:480
msgid "Get the principal nodal stresses of the node subset."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:500
msgid "Results as lists, arrays, and DataFrames"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:501
msgid "Using :meth:`mapdl.prnsol` to check"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:512
msgid "Use this command to obtain the data as a list."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:524
msgid "Use this command to obtain the data as an array:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:536
msgid "or as a DataFrame:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:548
msgid ""
"Use this command to obtain the data as a DataFrame, which is a. `Pandas data"
" type "
"<https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html>`_. "
"Because the Pandas module is imported, you can use its functions. For "
"example, you can write principal stresses to a file."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:566
msgid "Step 7: Advanced plotting"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:580
msgid "Load this result into the VTK grid."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:599
msgid "Generate a single horizontal slice along the XY plane."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:602
msgid ""
"PyVista's ``eye_dome_lighting`` method is used here to enhance the plots of "
"the slices. For more information, see`Eye Dome Lighting "
"<pyvista_eye_dome_lighting_>`_."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:625
msgid "Generate a plot with three slice planes."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:646
msgid "Generate a grid with multiple slices in the same plane."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:685
msgid ""
":download:`Download Jupyter notebook: lathe_cutter.ipynb "
"<lathe_cutter.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:689
msgid ""
":download:`Download Python source code: lathe_cutter.py <lathe_cutter.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/lathe_cutter.rst:693
msgid ":download:`Download zipped: lathe_cutter.zip <lathe_cutter.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/mapdl_3d_beam.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-"
"examples_mapdl_3d_beam.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/mapdl_3d_beam.rst:24
msgid "MAPDL 3D Beam Example"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/mapdl_3d_beam.rst:26
msgid ""
"This is a simple example that loads an archive file containing a beam and "
"then runs a modal analysis using the simplified ``modal_analysis`` method."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/mapdl_3d_beam.rst:30
msgid "First, start by launching MAPDL as a service."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/mapdl_3d_beam.rst:81
msgid "View the results using the pyansys result object"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/mapdl_3d_beam.rst:94
msgid "Access nodal displacement values"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/mapdl_3d_beam.rst:110
msgid "Plot a modal result"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/mapdl_3d_beam.rst:122
msgid ""
"Animate a modal result result.animate_nodal_solution(0, show_edges=True, "
"loop=False, displacement_factor=10, movie_filename='demo.gif')"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/mapdl_3d_beam.rst:147
msgid ""
":download:`Download Jupyter notebook: mapdl_3d_beam.ipynb "
"<mapdl_3d_beam.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/mapdl_3d_beam.rst:151
msgid ""
":download:`Download Python source code: mapdl_3d_beam.py <mapdl_3d_beam.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/mapdl_3d_beam.rst:155
msgid ":download:`Download zipped: mapdl_3d_beam.zip <mapdl_3d_beam.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/mapdl_beam.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-"
"examples_mapdl_beam.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/mapdl_beam.rst:24
msgid "MAPDL 2D Beam Example"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/mapdl_beam.rst:26
msgid ""
"This is an example from the book *\"Finite element analysis using ansys "
"11.0\"* by Paletikrishna Chaitanya, Sambanarajesh Kumar, and Datti Srinivas."
" PHI Learning Pvt. Ltd., 1 Jan 2010."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/mapdl_beam.rst:32
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:55
msgid "Launch MAPDL with interactive plotting"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/mapdl_beam.rst:45
msgid "Define an I-beam"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/mapdl_beam.rst:68
msgid "Create nodes within MAPDL"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/mapdl_beam.rst:92
msgid ""
"create elements between the nodes we can just manually create elements since"
" we know that the elements are sequential"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/mapdl_beam.rst:109
msgid ""
"Access them as a list of arrays See the documentation on ``mapdl.mesh.elem``"
" for interpreting the individual elements"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/mapdl_beam.rst:123
msgid "Define the boundary conditions"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/mapdl_beam.rst:145
msgid "run the static analysis"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/mapdl_beam.rst:177
msgid ""
":download:`Download Jupyter notebook: mapdl_beam.ipynb <mapdl_beam.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/mapdl_beam.rst:181
msgid ":download:`Download Python source code: mapdl_beam.py <mapdl_beam.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/mapdl_beam.rst:185
msgid ":download:`Download zipped: mapdl_beam.zip <mapdl_beam.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-"
"examples_modal_beam.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:25
msgid "MAPDL modal beam analysis example"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:27
msgid ""
"This example demonstrates how to perform a simple modal analysis and animate"
" its results."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:33
msgid ""
"This example models a simple 3D elastic beam made of BEAM188 elements. These"
" beams elements are made of a linear elastic material similar to steel, and "
"have a rectangular section."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:42
msgid "Material properties"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:44
msgid "Finite element model"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:46
msgid "Solving the model"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:73
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:75
msgid "Define material"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:92
msgid "Create keypoints and line"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:107
msgid "Define finite element model"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:109
msgid "Define element type/section type - Rectangular beam section."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:132
msgid "Specify boundary conditions"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:134
msgid "Fully fixed (clamped) end."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:152
msgid "Setting modal analysis"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:167
msgid "Postprocess"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:169
msgid "Enter the post processor (post1)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:184
msgid "Animate results"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:236
msgid ""
":download:`Download Jupyter notebook: modal_beam.ipynb <modal_beam.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:240
msgid ":download:`Download Python source code: modal_beam.py <modal_beam.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/modal_beam.rst:244
msgid ":download:`Download zipped: modal_beam.zip <modal_beam.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/path_operations.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-"
"examples_path_operations.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/path_operations.rst:24
msgid "Path Operations within PyMAPDL and MAPDL"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/path_operations.rst:26
msgid ""
"This tutorial shows how you can use pyansys and MAPDL to interpolate along a"
" path for stress.  This shows some advanced features of the `pyvista` module"
" to perform the interpolation."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/path_operations.rst:49
msgid "MAPDL: Solve a Beam with a Non-Uniform Load"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/path_operations.rst:50
msgid "Create a beam, apply a load, and solve for the static solution."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/path_operations.rst:101
msgid "Post-Processing - MAPDL Path Operation"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/path_operations.rst:102
msgid ""
"Compute the stress along a path within MAPDL and convert the result to a "
"numpy array"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/path_operations.rst:157
msgid "Comparing with Path Operation Within `pyvista`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/path_operations.rst:158
msgid ""
"The same path operation can be performed within `pyvista` by saving the "
"resulting stress and storing within the underlying ``UnstructuredGrid``"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/path_operations.rst:161
msgid ""
"Take note that there is slight piece-wise behavior in both MAPDL's and VTK's"
" interpoltion methods (both of which result in nearly identical "
"interpolations).  The underlying algorithm of VTK is:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/path_operations.rst:209
msgid "2D Slice Interpolation"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/path_operations.rst:210
msgid ""
"Take a 2D slice along the beam and plot it alongside the stress at the line."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/path_operations.rst:213
msgid ""
"Note that this slice occurs between the edge nodes of this beam, "
"necessitating interpolation as stress/strain is (in general) extrapolated to"
" the edge nodes of ANSYS FEMs."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/path_operations.rst:275
msgid ""
":download:`Download Jupyter notebook: path_operations.ipynb "
"<path_operations.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/path_operations.rst:279
msgid ""
":download:`Download Python source code: path_operations.py "
"<path_operations.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/path_operations.rst:283
msgid ":download:`Download zipped: path_operations.zip <path_operations.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pressure_vessel.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-"
"examples_pressure_vessel.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pressure_vessel.rst:24
msgid "Pressure Vessel"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pressure_vessel.rst:29
msgid ""
"Also shown here: - Various ways of accessing stress results from MAPDL. - "
"Comparison between PRNSOL, VGET (efficient wrapping), and the legacy reader."
" - Notes regarding FULL vs. POWER graphics when using PRNSOL."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pressure_vessel.rst:55
msgid "Set the materials and element type"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pressure_vessel.rst:72
msgid "Create the Geometry"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pressure_vessel.rst:98
msgid "Create the mesh"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pressure_vessel.rst:146
msgid ""
"Enter the MAPDL post-postprocessing routine (/POST1) and obtain the von-"
"mises stress for the single static solution. Here, we use MAPDL directly to "
"obtain the results using a wrapper around the VGET method to efficiently "
"obtain results without outputting to disk."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pressure_vessel.rst:183
msgid "Plot the results"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pressure_vessel.rst:196
msgid ""
"We could, alternatively, get the exact same results by directly accessing "
"the result file using the legacy file reader `ansys-mapdl-reader "
"<https://github.com/ansys/pymapdl-reader>`_."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pressure_vessel.rst:218
msgid "That these results are equivalent to results from PRNSOL."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pressure_vessel.rst:221
msgid ""
"Enabling POWER GRAPHICS with ``mapdl.graphics('POWER')`` will change the "
"averaging scheme."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pressure_vessel.rst:264
msgid ""
":download:`Download Jupyter notebook: pressure_vessel.ipynb "
"<pressure_vessel.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pressure_vessel.rst:268
msgid ""
":download:`Download Python source code: pressure_vessel.py "
"<pressure_vessel.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pressure_vessel.rst:272
msgid ":download:`Download zipped: pressure_vessel.zip <pressure_vessel.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-"
"examples_psd-vm203.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:25
msgid "Dynamic Load Effect on a Supported Thick Plate"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:27
msgid ""
"This example demonstrates how to perform a random vibration analysis using "
"PyMAPDL."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:31
msgid ""
"This example is based on the ANSYS Verification Manual, problem 203 (VM203)."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:37
msgid ""
"A simply-supported thick square plate of length L, thickness t, and mass per"
" unit area m is subject to random uniform pressure power spectral density. "
"Determine the peak one-sigma displacement at undamped natural frequency."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:42
msgid ""
"A frequency range of 1.0 Hz to 80 Hz is used as an approximation of the "
"white noise PSD forcing function frequency.  The PSD curve is a constant "
"$$(1E6 N/m^2)^2 / Hz$$."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:46
msgid "The model is solved using SHELL281 elements and generic materials."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:70
msgid "Parameters"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:72
msgid "Loading parameters"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:87
msgid ""
"Set the element type to SHELL281, which is a 3D structural high-order shell "
"element."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:155
msgid "Apply a uniform pressure load of 1,000,000 N/m^2"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:166
msgid "Apply constraints UX, UY, ROTZ DOFs all fixed"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:178
msgid "Simply supported on the four corners"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:197
msgid ""
"Solve the modal analysis using the PCG Lanczos solver to find and expand the"
" first two modes of the model."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:220
msgid "PSD Spectrum analysis"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:222
msgid "Now let's perform PSD spectrum analysis using the two solved modes:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:236
msgid "Define the PSD spectrum"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:248
msgid "Applying proportional damping"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:260
msgid "PSD frequency value table 1 to 80 Hz"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:276
msgid "Define the PSD load vector generated at modal analysis"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:290
msgid "Write out the displacement result"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:310
msgid ""
"Now we can plot the results of the one-sigma displacement solution. We will "
"plot the Z displacement of the nodes."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:326
msgid "Use post26 to capture then plot the response psd and the max value"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:344
msgid ""
"While you can use the `extrem` command to get the maximum and minimum "
"values:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:355
msgid ""
"You can also use Numpy methods to find the max value of the response psd."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:379
msgid ""
"To get the maximum value of the response psd you can use the `get_value` ( "
"wrapper of `*GET`) method with the `EXTREM` option:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:391
msgid "However, you can also use the numpy methods here as well:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:402
msgid "You can plot the response psd using MAPDL methods:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:422
msgid "or use matplotlib:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:451
msgid "Compare and print results to manual values"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:487
msgid ""
":download:`Download Jupyter notebook: psd-vm203.ipynb <psd-vm203.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:491
msgid ":download:`Download Python source code: psd-vm203.py <psd-vm203.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/psd-vm203.rst:495
msgid ":download:`Download zipped: psd-vm203.zip <psd-vm203.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pyvista_mesh.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-"
"examples_pyvista_mesh.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pyvista_mesh.rst:24
msgid "PyVista Mesh Integration"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pyvista_mesh.rst:26
msgid "Run a modal analysis on a mesh generated from pyvista within MAPDL."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pyvista_mesh.rst:51
msgid "Write the mesh to a temporary file"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pyvista_mesh.rst:92
msgid "Load the result file within ``pyansys`` and plot the 8th mode."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pyvista_mesh.rst:106
msgid "plot the 1st mode using contours"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pyvista_mesh.rst:119
msgid "Animate a high frequency mode"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pyvista_mesh.rst:121
msgid ""
"Get a smoother plot by disabling movie_filename and increasing ``n_frames``."
" Enable a continuous plot looping with ```loop=True```."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pyvista_mesh.rst:162
msgid ""
":download:`Download Jupyter notebook: pyvista_mesh.ipynb "
"<pyvista_mesh.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pyvista_mesh.rst:166
msgid ""
":download:`Download Python source code: pyvista_mesh.py <pyvista_mesh.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/pyvista_mesh.rst:170
msgid ":download:`Download zipped: pyvista_mesh.zip <pyvista_mesh.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:8
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/sg_execution_times.rst:8
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/sg_execution_times.rst:8
#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/sg_execution_times.rst:8
#: ../../pymapdl/doc/source/examples/gallery_examples/sg_execution_times.rst:8
msgid "Computation times"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:9
msgid ""
"**00:00.000** total execution time for 27 files **from "
"examples/gallery_examples/00-mapdl-examples**:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:32
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/sg_execution_times.rst:32
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/sg_execution_times.rst:32
#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/sg_execution_times.rst:32
#: ../../pymapdl/doc/source/examples/gallery_examples/sg_execution_times.rst:32
msgid "Example"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:33
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/sg_execution_times.rst:33
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/sg_execution_times.rst:33
#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/sg_execution_times.rst:33
#: ../../pymapdl/doc/source/examples/gallery_examples/sg_execution_times.rst:33
msgid "Time"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:34
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/sg_execution_times.rst:34
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/sg_execution_times.rst:34
#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/sg_execution_times.rst:34
#: ../../pymapdl/doc/source/examples/gallery_examples/sg_execution_times.rst:34
msgid "Mem (MB)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:35
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_2d_magnetostatic_solenoid-BodyFlux_Averaging.py` "
"(``2d_magnetostatic_solenoid-BodyFlux_Averaging.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:36
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:39
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:42
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:45
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:48
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:51
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:54
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:57
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:60
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:63
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:66
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:69
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:72
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:75
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:78
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:81
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:84
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:87
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:90
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:93
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:96
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:99
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:102
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:105
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:108
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:111
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:114
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/sg_execution_times.rst:36
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/sg_execution_times.rst:39
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/sg_execution_times.rst:42
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/sg_execution_times.rst:45
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/sg_execution_times.rst:48
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/sg_execution_times.rst:36
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/sg_execution_times.rst:39
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/sg_execution_times.rst:42
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/sg_execution_times.rst:45
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/sg_execution_times.rst:48
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/sg_execution_times.rst:51
#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/sg_execution_times.rst:36
msgid "00:00.000"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:37
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:40
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:43
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:46
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:49
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:52
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:55
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:58
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:61
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:64
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:67
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:70
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:73
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:76
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:79
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:82
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:85
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:88
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:91
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:94
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:97
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:100
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:103
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:106
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:109
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:112
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:115
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/sg_execution_times.rst:37
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/sg_execution_times.rst:40
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/sg_execution_times.rst:43
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/sg_execution_times.rst:46
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/sg_execution_times.rst:49
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/sg_execution_times.rst:37
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/sg_execution_times.rst:40
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/sg_execution_times.rst:43
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/sg_execution_times.rst:46
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/sg_execution_times.rst:49
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/sg_execution_times.rst:52
#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/sg_execution_times.rst:37
msgid "0.0"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:38
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_2d_plate_with_a_hole.py` (``2d_plate_with_a_hole.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:41
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_2d_pressure_vessel.py` (``2d_pressure_vessel.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:44
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_3d_notch.py` "
"(``3d_notch.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:47
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_3d_plate_thermal.py` (``3d_plate_thermal.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:50
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_acoustic_analysis.py` (``acoustic_analysis.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:53
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_basic_dpf_example.py` (``basic_dpf_example.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:56
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_beam_with_report.py` (``beam_with_report.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:59
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_bracket_static.py` (``bracket_static.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:62
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_composite_dcb.py`"
" (``composite_dcb.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:65
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_contact_elements.py` (``contact_elements.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:68
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_cyclic_analysis.py` (``cyclic_analysis.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:71
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_cyclic_static.py`"
" (``cyclic_static.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:74
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_exhaust_manifold_thermal_stress.py` "
"(``exhaust_manifold_thermal_stress.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:77
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_geometry.py` "
"(``geometry.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:80
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_lathe_cutter.py` "
"(``lathe_cutter.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:83
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_mapdl_3d_beam.py`"
" (``mapdl_3d_beam.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:86
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_mapdl_beam.py` "
"(``mapdl_beam.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:89
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_modal_beam.py` "
"(``modal_beam.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:92
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_path_operations.py` (``path_operations.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:95
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_pressure_vessel.py` (``pressure_vessel.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:98
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_psd-vm203.py` "
"(``psd-vm203.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:101
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_pyvista_mesh.py` "
"(``pyvista_mesh.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:104
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_slashmap_cfx_mapping.py` (``slashmap_cfx_mapping.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:107
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-examples_spotweld.py` "
"(``spotweld.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:110
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_torsional_load.py` (``torsional_load.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/sg_execution_times.rst:113
msgid ""
":ref:`sphx_glr_examples_gallery_examples_00-mapdl-"
"examples_transient_thermal.py` (``transient_thermal.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/slashmap_cfx_mapping.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-"
"examples_slashmap_cfx_mapping.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/slashmap_cfx_mapping.rst:25
msgid "CFX pressure data mapping to structural blade"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/slashmap_cfx_mapping.rst:27
msgid ""
"The objective of this test is to demonstrate CFX pressure data mapping to "
"structural 11 blade model in PyMAPDL."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/slashmap_cfx_mapping.rst:33
msgid ""
"The 11 blade model along with a fictitious disk is modeled. CFX generated "
"pressure data is used as input."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/slashmap_cfx_mapping.rst:36
msgid ""
"The test uses a CFX exported pressure data to map. Pressure file correspond "
"to a certain vibrating blade mode (vibrating mode 1 approximately 534 Hz)and"
" to a certain pressure mode (pressure mode 1 also the same 534 Hz mode). "
"However, due to lack of data for another mode this same file will be assumed"
" to represent other mode combinations (vib mode 2 press mode 2) (vib mode 1 "
"press mode 2) (vib mode 2 press mode 1)."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/slashmap_cfx_mapping.rst:58
msgid "Downloading files"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/slashmap_cfx_mapping.rst:92
msgid "Upload files to the instance"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/slashmap_cfx_mapping.rst:94
msgid "Uploading files"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/slashmap_cfx_mapping.rst:108
msgid "Pressure mapping"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/slashmap_cfx_mapping.rst:110
msgid "Resume the database from the example mapping file"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/slashmap_cfx_mapping.rst:146
msgid "Plot mapping"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/slashmap_cfx_mapping.rst:148
msgid "Plot the geometries and mappings"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/slashmap_cfx_mapping.rst:198
msgid ""
":download:`Download Jupyter notebook: slashmap_cfx_mapping.ipynb "
"<slashmap_cfx_mapping.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/slashmap_cfx_mapping.rst:202
msgid ""
":download:`Download Python source code: slashmap_cfx_mapping.py "
"<slashmap_cfx_mapping.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/slashmap_cfx_mapping.rst:206
msgid ""
":download:`Download zipped: slashmap_cfx_mapping.zip "
"<slashmap_cfx_mapping.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/spotweld.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-"
"examples_spotweld.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/spotweld.rst:24
msgid "Running an input file - spotweld SHELL181 example"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/spotweld.rst:26
msgid ""
"This MAPDL example demonstrates how to model spot welding on three thin "
"sheets of metal. Here, the full input file is simply run using the PyMAPDL "
"interface."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/spotweld.rst:30
msgid ""
"Using the following commands, you can directly use an APDL script within a "
"PyMAPDL session with the following commands:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/spotweld.rst:37
#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/torsional_load.rst:32
msgid "Script initialization"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/spotweld.rst:53
msgid "Download and run an MAPDL script"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/spotweld.rst:92
msgid "Stress"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/spotweld.rst:111
msgid "The stress at the contact element simulating the spot weld."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/spotweld.rst:113
msgid "Plot the nodal stress in the Z direction."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/spotweld.rst:125
msgid "Get the cumulative equivalent stress and plot the von Mises stress."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/spotweld.rst:158
msgid ":download:`Download Jupyter notebook: spotweld.ipynb <spotweld.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/spotweld.rst:162
msgid ":download:`Download Python source code: spotweld.py <spotweld.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/spotweld.rst:166
msgid ":download:`Download zipped: spotweld.zip <spotweld.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/torsional_load.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-"
"examples_torsional_load.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/torsional_load.rst:24
msgid "Torsional load on a bar using SURF154 elements"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/torsional_load.rst:26
msgid ""
"This Ansys PyMAPDL script builds a bar and applies torque to it using "
"SURF154 elements. This is a static analysis example."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/torsional_load.rst:52
msgid "Define cylinder and mesh parameters"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/torsional_load.rst:72
msgid "Model creation"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/torsional_load.rst:91
msgid "Aluminum properties (or something)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/torsional_load.rst:115
msgid "Mesh cylinder"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/torsional_load.rst:192
msgid "Access element results as arrays"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/torsional_load.rst:208
msgid "Plot interactively"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/torsional_load.rst:224
msgid "Plot non-interactively"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/torsional_load.rst:270
msgid ""
":download:`Download Jupyter notebook: torsional_load.ipynb "
"<torsional_load.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/torsional_load.rst:274
msgid ""
":download:`Download Python source code: torsional_load.py "
"<torsional_load.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/torsional_load.rst:278
msgid ":download:`Download zipped: torsional_load.zip <torsional_load.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-"
"examples_transient_thermal.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:24
msgid "Example Thermal Transient Analysis"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:26
msgid ""
"This example shows how you can use PyMAPDL to input a time dependent "
"temperature table to vary the temperature at a beam. This uses convection "
"loads with independently varying convection coefficient and bulk "
"temperature."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:31
msgid ""
"Example adapted from: https://www.simutechgroup.com/tips-and-tricks/fea-"
"articles/97-fea-tips-tricks-thermal-transient"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:34
msgid "Thanks SimuTech!"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:68
msgid "Geometry and Mesh"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:69
msgid "Create a block 5x1x1 inches in size and mesh it"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:88
msgid "Setup the Solution"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:89
msgid "Solve a transient analysis while ramping the load up and down."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:91
msgid ""
"Note the solution time commands in the above code fragment. The final TIME "
"is set to 1000 seconds. Time substep size is permitted to range from a "
"minimum of 2 seconds to a maximum of 50 seconds in the DELTIM command. A "
"first substep of 10 seconds is applied. Automatic time substep sizing will "
"vary substeps between the extremes."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:97
msgid ""
"A Table Array is used for the time-dependent Convection Coefficient values. "
"Times go in the Zeroth column, while associated Convection Coefficients go "
"in the First column."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:154
msgid "The Transient Thermal Solve"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:155
msgid ""
"This model is to be solved in one time step. For this reason, a ``TSRES`` "
"command is used for force the solver to include a ``SOLVE`` at every time "
"point in the two Table Arrays above. This ensures that the time-dependent "
"curves are followed by the transient analysis. Intermediate solutions "
"between the ``TSRES`` time points will be included according to the "
"``DELTIM`` command and the automatic time stepping decisions of the ANSYS "
"solver."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:163
msgid ""
"In this example, the times for the ``TSRES`` array illustrated above have "
"been determined manually. A set of APDL commands could be used to automate "
"this process for chosen Table Array entries, in more complex modeling "
"situations, including checks that no time intervals are too short."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:169
msgid ""
"Results at substeps will be wanted if the intermediate solutions of the "
"time-transient analysis are to be available for post-processing review. The "
"``OUTRES`` command is used to control how much is written to the results "
"file. In this example the OUTRES command will be used to simply write out "
"all results for all substeps. In work with large models and may substeps, "
"too much data will be written if such a strategy is employed for ``OUTRES``,"
" and other options will need to be considered. Note that one option for the "
"``OUTRES`` command is to control times at which results are written with a "
"Table Array, much as is used in the ``TSRES`` command, but typically for a "
"larger number of time points, although including those of the TSRES array."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:181
msgid ""
"The initial condition starting temperature is controlled for this example "
"with the ``TUNIF`` command. Note that thermal transient analyses can also "
"have a starting temperature profile formed by a static thermal ``SOLVE``. If"
" a user neglects to set an initial temperature in ANSYS Mechanical APDL, a "
"value of zero will be used, which is often not what is desired."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:188
msgid ""
"The thermal convective loads are applied with an SF family command—in this "
"example a convective load is applied to the end face of the solid model by "
"the SFA command, using the Table Array entries for convection and bulk "
"temperature that were developed above. The Table Array names are surrounded "
"with percent signs (%).  A SOLVE is then performed."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:223
msgid ""
"Open up the result file using ``ansys.mapdl.reader`` result = "
"mapdl.thermal_result"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:236
msgid "Visualize a Slice"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:237
msgid ""
"Visualize a slice through the dataset using ``pyvista`` for more details "
"visit `PyVista documentation <pyvista_docs_>`_."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:262
msgid "Visualize Several Slices"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:263
msgid "This shows how you can visualize a series of slices through a dataset"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:287
msgid "Temperature at a Single Point"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:288
msgid ""
"Extract the temperature at a single node and plot it with respect to the "
"input temperatures using ``ansys.mapdl``"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:291
msgid ""
"Here, we use the ``get_value`` command which is very similar to the ``*GET``"
" command, except it immediately returns the value as a python accessible "
"variable, rather than storing it to a MAPDL value."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:309
msgid "Here, we extract the temperature of the node across for each solution"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:327
msgid ""
"Alternatively, you can simply grab the data for the node from the entire "
"response.  This is less efficient as the entire data set is sent back for "
"each result."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:351
msgid "Plot the temperature as a function of time"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:387
msgid ""
":download:`Download Jupyter notebook: transient_thermal.ipynb "
"<transient_thermal.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:391
msgid ""
":download:`Download Python source code: transient_thermal.py "
"<transient_thermal.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/00-mapdl-examples/transient_thermal.rst:395
msgid ""
":download:`Download zipped: transient_thermal.zip <transient_thermal.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_examples_gallery_examples_01-geometry_00-keypoints.py>` "
"to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:24
msgid "Keypoints"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:26
msgid ""
"This example shows how to create basic geometry using keypoints commands."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:29
msgid "This section is focused on creating keypoints."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:51
msgid "APDL Command: K"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:52
msgid ""
"Create a single keypoint at ``[0, 0, 0]``.  Note that the first value is an "
"empty string to allow MAPDL to pick the keypoint number."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:66
msgid "Create keypoint at (10, 11, 12) while specifying the keypoint number."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:80
msgid "APDL Command: KBETW"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:81
msgid "Create keypoint between two keypoints"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:95
msgid "APDL Command: KCENTER"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:96
msgid ""
"Create keypoint at the center of a circular arc defined by three locations. "
"Note that we first clear mapdl before generating this geometry"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:116
msgid "Keypoint IDs"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:117
msgid ""
"Return an array of the keypoint IDs Note that this matches the array ``[k0, "
"k1, k2, k3]`` (due to sorting)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:131
msgid "Keypoints geometry"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:132
msgid ""
"Get the VTK ``MultiBlock`` containing keypoints. This VTK mesh can be saved "
"or plotted.  For more information, visit `PyVista documentation "
"<pyvista_docs_>`_."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:149
msgid "Keypoint Coordinates"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:150
msgid "Return an array of the keypoint locations"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:164
msgid "APDL Command: KDIST"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:165
msgid ""
"Calculate the distance between two keypoints.  Note that you could compute "
"this yourself from ``kloc``"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:180
msgid "Keypoint Selection"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:181
msgid ""
"There are two approaches for selecting keypoints, the old \"legacy\" style "
"and the new style.  The old style is valuable for those who are comfortable "
"with the existing MAPDL commands, and new style is useful for selecting "
"keypoints in a pythonic manner."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:186
msgid "This example generates a series of random keypoints and selects them"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:206
msgid "Select every other keypoint with the old style command."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:219
msgid "Select every other keypoint with the new style command."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:221
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:421
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:358
msgid ""
"Note that the item IDs are 1 based in MAPDL, while Python ranges are 0 "
"based."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:235
msgid "Select keypoints from a list"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:237
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:437
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:257
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:374
msgid ""
"Note that you can ``return_selected`` if you want to see what you have "
"selected.  This is helpful when reselecting from existing areas."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:241
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:441
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:378
msgid "Note that you could use a numpy array here as well."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:255
msgid "APDL Command: KPLOT"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:256
msgid "Plot the keypoints while displaying the keypoint numbers"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:258
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:458
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:395
msgid ""
"There are a variety of plotting options available for all the common "
"plotting methods."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:294
msgid ""
":download:`Download Jupyter notebook: 00-keypoints.ipynb "
"<00-keypoints.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:298
msgid ""
":download:`Download Python source code: 00-keypoints.py <00-keypoints.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/00-keypoints.rst:302
msgid ":download:`Download zipped: 00-keypoints.zip <00-keypoints.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_examples_gallery_examples_01-geometry_01-lines.py>` to "
"download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:24
msgid "Lines"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:26
msgid "This example shows how to create basic geometry using lines commands."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:49
msgid "APDL Command: L"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:51
msgid ""
"Create a line between the two keypoints ``(0, 0, 0)`` and ``(1, 0, 0)``"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:68
msgid "APDL Command: LARC"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:69
msgid ""
"Create a circular arc that travels between ``(0, 0, 0)`` and ``(1, 1, 0)`` "
"with a radius of curvature of 2.  Plot the result."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:90
msgid "APDL Command: L2ANG"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:91
msgid "Create two circles and join them with a line.  Plot the result."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:113
msgid "APDL Command: L2TAN"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:114
msgid ""
"Create two circular arcs and connect them with a spline.  Plot the result."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:137
msgid "APDL Command: LANG"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:138
msgid ""
"Create a line from a line from ``(0, 0, 0)`` to ``(1, 0, 0)`` to a keypoint "
"at ``(1, 1, 1)`` at an angle of 60 degrees.  Plot the result."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:160
msgid "APDL Command: LAREA"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:161
msgid "Generate a line on a square between its two corners."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:183
msgid "APDL Command: LCOMB"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:184
msgid "Create two lines and combine them."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:203
msgid "APDL Command: LDIV"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:204
msgid "Create a single line and divide it into 5 pieces."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:224
msgid "APDL Command: LEXTND"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:225
msgid "Create a circular arc and extend it at one of its keypoints."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:245
msgid "APDL Command: LFILLT"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:246
msgid ""
"Create two intersecting lines at a right angle and add a fillet between "
"them."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:269
msgid "APDL Command: LTAN"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:270
msgid ""
"Create a circular arc and generate a tangent spline at the end of it "
"directed to a new keypoint."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:292
msgid "APDL Command: SPLINE"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:293
msgid "Generate a segmented spline through 5 keypoints."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:315
msgid "APDL Command: BSPLIN"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:316
msgid ""
"Generate a single line from a spline fit to a series of keypoints. Generate "
"through ``(0, 0, 0)``, ``(0, 1, 0)`` and ``(1, 2, 0)``"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:319
msgid ""
"This is different than the ``spline`` method as this creates a single line "
"rather than multiple lines."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:340
msgid "Line IDs"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:341
msgid "Return an array of the line IDs"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:355
msgid "Line Geometry"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:356
msgid ""
"Get the VTK ``MultiBlock`` containing lines.  This VTK mesh can be saved or "
"plotted.  For more information, see the `PyVista documentation "
"<pyvista_docs_>`_."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:373
msgid "Line Selection"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:374
msgid ""
"There are two approaches for selecting lines, the old \"legacy\" style and "
"the new style.  The old style is valuable for those who are comfortable with"
" the existing MAPDL commands, and new style is useful for selecting lines in"
" a pythonic manner."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:379
msgid "This example generates a series of random lines and selects them"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:406
msgid "Select every other line with the old style command."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:419
msgid "Select every other line with the new style command."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:435
msgid "Select lines from a list"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:455
msgid "APDL Command: LPLOT"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:456
msgid "Plot colored lines while displaying the keypoint numbers."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:500
msgid ":download:`Download Jupyter notebook: 01-lines.ipynb <01-lines.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:504
msgid ":download:`Download Python source code: 01-lines.py <01-lines.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/01-lines.rst:508
msgid ":download:`Download zipped: 01-lines.zip <01-lines.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_examples_gallery_examples_01-geometry_02-areas.py>` to "
"download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:24
msgid "Areas"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:26
msgid "This example shows how to create basic geometry using area commands."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:49
msgid "APDL Command: A"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:50
msgid "Create a simple triangle in the XY plane using three keypoints."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:68
msgid "APDL Command: AL"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:69
msgid "Create an area from four lines."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:94
msgid "APDL Command: ADRAG"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:95
msgid "Generate areas by dragging a line pattern along a path."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:97
msgid "Drag a circle between two keypoints to create an area"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:118
msgid "APDL Command: ASBA"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:119
msgid "Subtract a ``0.5 x 0.5`` rectangle from a ``1 x 1`` rectangle."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:138
msgid "Area IDs"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:139
msgid "Return an array of the area IDs"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:153
msgid "Area Geometry"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:154
msgid ""
"Get the VTK ``Multiblock`` containing lines. This VTK mesh can be saved or "
"plotted.  For more information, see the `PyVista documentation "
"<pyvista_docs_>`_."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:171
msgid "Merged Area Geometry"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:172
msgid "You can also obtain the areas as ``pyvista.PolyData`` objects."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:174
msgid ""
"Note that this is a method. You can select the quality of the areas (mesh "
"density) and whether you want a merged output or individual meshes."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:195
msgid "Area Selection"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:196
msgid ""
"There are two approaches for selecting areas, the old \"legacy\" style and "
"the new style.  The old style is valuable for those who are comfortable with"
" the existing MAPDL commands, and new style is useful for selecting areas in"
" a pythonic manner."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:201
msgid "This example generates a series of random squares and selects them"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:227
msgid "Select every other area with the old style command."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:240
msgid "Select every other area with the new style command."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:242
msgid ""
"Note that the Area IDs are 1 based in MAPDL, while Python ranges are 0 "
"based."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:255
msgid "Select areas from a list"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:273
msgid "APDL Command: APLOT"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:274
msgid "This method uses VTK and pyvista to generate a dynamic 3D plot."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:276
msgid ""
"There are a variety of plotting options available for all the common "
"plotting methods.  Here, we enable the bounds and show the lines of the plot"
" while increasing the plot quality with the ``quality`` parameter."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:281
msgid ""
"Note that the `cpos` keyword argument can be used to describe the camera "
"direction from the following:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:284
msgid "``iso`` - Isometric view"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:285
msgid "``xy`` - XY Plane view"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:286
msgid "``xz`` - XZ Plane view"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:287
msgid "``yx`` - YX Plane view"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:288
msgid "``yz`` - YZ Plane view"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:289
msgid "``zx`` - ZX Plane view"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:290
msgid "``zy`` - ZY Plane view"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:321
msgid ":download:`Download Jupyter notebook: 02-areas.ipynb <02-areas.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:325
msgid ":download:`Download Python source code: 02-areas.py <02-areas.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/02-areas.rst:329
msgid ":download:`Download zipped: 02-areas.zip <02-areas.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_examples_gallery_examples_01-geometry_03-volumes.py>` to "
"download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:24
msgid "Volumes"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:26
msgid "This example shows how to create basic geometry using volume commands."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:49
msgid "APDL Command: V"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:50
msgid "Define a volume through keypoints."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:74
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:98
msgid "Create a triangular prism"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:119
msgid "APDL Command: VA"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:120
msgid "Generate a volume bounded by existing areas."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:122
msgid "Create a simple tetrahedral bounded by 4 areas"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:151
msgid "APDL Command: VDRAG"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:152
msgid "Generate volumes by dragging an area pattern along a path."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:154
msgid "Create a square with a hole in it and drag it along an arc."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:180
msgid "APDL Command: VEXT"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:181
msgid "Generate additional volumes by extruding areas."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:183
msgid "Create a basic cylinder by extruding a circle."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:207
msgid "Create a tapered cylinder by using the ``rx`` and ``ry`` parameters."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:222
msgid "APDL Command: VROTAT"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:223
msgid ""
"Generate cylindrical volumes by rotating an area pattern about an axis."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:226
msgid "Rotate a circle about the Z axis to create a hoop"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:257
msgid "APDL Command: VSYMM"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:258
msgid "Generate volumes from a volume pattern by symmetry reflection."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:260
msgid ""
"Create four blocks by reflecting a single block across the YZ and then XZ "
"planes."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:281
msgid "Volume IDs"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:282
msgid "Return an array of the volume numbers."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:296
msgid "Volume Geometry"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:297
msgid "Volume geometry can be accessed from the ``geometry.volumes`` method."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:311
msgid "Volume Selection"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:312
msgid ""
"There are two approaches for selecting volumes, the old \"legacy\" style and"
" the new style.  The old style is valuable for those who are comfortable "
"with the existing MAPDL commands, and new style is useful for selecting "
"volumes in a pythonic manner."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:317
msgid "This example generates a series of random volumes and selects them"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:343
msgid "Select every other volume with the old style command."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:356
msgid "Select every other volume with the new style command."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:372
msgid "Select volumes from a list"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:392
msgid "APDL Command: VPLOT"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:393
msgid "Plot colored volumes while displaying the keypoint numbers."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:436
msgid ""
":download:`Download Jupyter notebook: 03-volumes.ipynb <03-volumes.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:440
msgid ":download:`Download Python source code: 03-volumes.py <03-volumes.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/03-volumes.rst:444
msgid ":download:`Download zipped: 03-volumes.zip <03-volumes.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_examples_gallery_examples_01-geometry_04-primitives.py>` "
"to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:24
msgid "Primitives"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:26
msgid ""
"This example shows the different commands for volume creation, such as "
"blocks, cylinders, etc."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:47
msgid "APDL Command: BLC4"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:48
msgid "Create a rectangular area or block volume by corner points."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:50
msgid "Create a ``0.5 x 0.5`` rectangle starting at ``(0.25, 0.25)``"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:66
msgid ""
"Create a block with dimensions ``1 x 4 x 9`` with one corner of the block at"
" ``(0, 0)`` of the current working plane."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:69
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:112
msgid "This method returns the volume number."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:85
msgid "APDL Command: BLC5"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:86
msgid "Create a rectangular area or block volume by center and corner points."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:88
msgid ""
"This differs from BLC4 since this describes the center rather than the "
"corner points."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:91
msgid ""
"Create a square centered at ``(0, 0)`` with a width of 0.5 and a height of "
"0.5"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:109
msgid ""
"Create a block with dimensions ``1 x 4 x 9`` with the cetner at ``(0, 0)`` "
"of the current working plane."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:129
msgid "APDL Command: BLOCK"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:130
msgid ""
"Create a block volume based on working plane coordinates with the size ``(1 "
"x 2 x 3)``"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:153
msgid "APDL Command: CON4"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:154
msgid "Create a conical volume anywhere on the working plane."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:156
msgid "Create a cone with a bottom radius of 3 and a height of 10."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:173
msgid "APDL Command: CONE"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:174
msgid "Create a conical volume centered about the working plane origin."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:176
msgid ""
"Create a quarter cone with a bottom radius of 3, top radius of 1 and a "
"height of 10 centered at ``(0, 0)``."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:193
msgid "APDL Command: CYL4"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:194
msgid ""
"Creates a circular area or cylindrical volume anywhere on the working plane."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:196
msgid ""
"Create a half arc centered at the origin with an outer radius of 2 and an "
"inner radius of 1."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:199
msgid ""
"Note that the ``depth`` keyword argument is unset, which will generate an "
"area rather than a volume.  Setting depth to a value greater than 0 will "
"generate a volume."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:217
msgid ""
"Create a volumetric half arc centered at the origin with an outer radius of "
"2 and an inner radius of 1, and a thickness of 0.55."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:237
msgid "APDL Command: CYL5"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:238
msgid "Creates a circular area or cylindrical volume by end points."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:240
msgid ""
"Create a circular with one point of the circle at ``(1, 1)`` and the other "
"point at ``(2, 2)``"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:257
msgid ""
"Create a cylinder with one point of the circle at ``(X, Y) == (1, 1)`` and "
"the other point at ``(X, Y) == (2, 2)`` with a height of 3."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:275
msgid "APDL Command: CYLIND"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:276
msgid "Create a cylindrical volume centered about the working plane origin."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:278
msgid ""
"Create a hollow cylinder with an inner radius of 0.9 and an outer radius of "
"1.0 with a height of 5"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:296
msgid "APDL Command: PCIRC"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:297
msgid "Create a circular area centered about the working plane origin."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:299
msgid ""
"In this example a circular area with an inner radius of 0.95 and an outer "
"radius of 1 is created."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:317
msgid "APDL Command: RECTNG"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:318
msgid "Create a rectangular area anywhere on the working plane."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:320
msgid ""
"In this example a rectangle with one corner at ``(0.5, 0.5)`` and another at"
" ``(1.5, 2.5)`` is created."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:338
msgid "APDL Command: SPH4"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:339
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:360
#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:381
msgid "Create a spherical volume anywhere on the working plane."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:341
msgid ""
"This example creates a hollow sphere with an inner radius of 0.9 and an "
"outer radius of 1.0 centered at ``(0, 0)``"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:359
msgid "APDL Command: SPHERE"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:362
msgid ""
"This example creates a half hollow sphere with an inner radius of 0.9 and an"
" outer radius of 1.0."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:380
msgid "APDL Command: SPH5"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:383
msgid ""
"This example creates a sphere with one point at ``(1, 1)`` and one point at "
"``(2, 2)``"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:401
msgid "APDL Command: TORUS"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:402
msgid "Create a toroidal volume."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:404
msgid ""
"This example creates a torus with an inner minor radius of 1, an "
"intermediate radii of 2, and a major radius of 5.  The values 0 and 180 "
"define the starting and ending angles of the torus."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:441
msgid ""
":download:`Download Jupyter notebook: 04-primitives.ipynb "
"<04-primitives.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:445
msgid ""
":download:`Download Python source code: 04-primitives.py <04-primitives.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/04-primitives.rst:449
msgid ":download:`Download zipped: 04-primitives.zip <04-primitives.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/index.rst:6
#: ../../pymapdl/doc/source/examples/index.rst:38
msgid "Geometry examples"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/index.rst:7
#: ../../pymapdl/doc/source/examples/index.rst:43
msgid "These examples demonstrate using PyMAPDL to create basic geometry."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/index.rst:26
msgid ":ref:`sphx_glr_examples_gallery_examples_01-geometry_00-keypoints.py`"
msgstr ":ref:`sphx_glr_examples_gallery_examples_01-geometry_00-keypoints.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/index.rst:43
msgid ":ref:`sphx_glr_examples_gallery_examples_01-geometry_01-lines.py`"
msgstr ":ref:`sphx_glr_examples_gallery_examples_01-geometry_01-lines.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/index.rst:60
msgid ":ref:`sphx_glr_examples_gallery_examples_01-geometry_02-areas.py`"
msgstr ":ref:`sphx_glr_examples_gallery_examples_01-geometry_02-areas.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/index.rst:77
msgid ":ref:`sphx_glr_examples_gallery_examples_01-geometry_03-volumes.py`"
msgstr ":ref:`sphx_glr_examples_gallery_examples_01-geometry_03-volumes.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/index.rst:94
msgid ":ref:`sphx_glr_examples_gallery_examples_01-geometry_04-primitives.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_01-geometry_04-primitives.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/sg_execution_times.rst:9
msgid ""
"**00:00.000** total execution time for 5 files **from "
"examples/gallery_examples/01-geometry**:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/sg_execution_times.rst:35
msgid ""
":ref:`sphx_glr_examples_gallery_examples_01-geometry_00-keypoints.py` "
"(``00-keypoints.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/sg_execution_times.rst:38
msgid ""
":ref:`sphx_glr_examples_gallery_examples_01-geometry_01-lines.py` "
"(``01-lines.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/sg_execution_times.rst:41
msgid ""
":ref:`sphx_glr_examples_gallery_examples_01-geometry_02-areas.py` "
"(``02-areas.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/sg_execution_times.rst:44
msgid ""
":ref:`sphx_glr_examples_gallery_examples_01-geometry_03-volumes.py` "
"(``03-volumes.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/01-geometry/sg_execution_times.rst:47
msgid ""
":ref:`sphx_glr_examples_gallery_examples_01-geometry_04-primitives.py` "
"(``04-primitives.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_02-tips-n-"
"tricks_00-example-template.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:25
msgid "Adding a new gallery example"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:27
msgid ""
"This example is an example itself which demonstrates how to add new examples"
" to the documentation."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:30
msgid "Example location and naming"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:32
msgid "New examples should be added as Python scripts to:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:34
msgid "``PyMAPDL/examples/XY-example-folder-name/``"
msgstr "``PyMAPDL/examples/XY-example-folder-name/``"

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:37
msgid ""
"Avoid creating new folders unless absolutely necessary. If in doubt put the "
"example in the folder closest to what it is doing and its precise location "
"can be advised on in the pull request. If you *must* create a new folder, "
"make sure to add a ``README.txt`` containing a reference, a title and a "
"single sentence description of the folder. Otherwise the new folder will be "
"ignored by Sphinx."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:43
msgid "Example file names should be in the format:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:45
msgid "``XY-example-name.py``"
msgstr "``XY-example-name.py``"

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:47
msgid ""
"Where ``XY`` is the number of the example. If there are already three "
"examples numbered ``00``, ``01``, and ``02``, then your example must "
"subsequently use the prefix ``03``."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:51
msgid "Initial block of text"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:52
msgid ""
"At the top of each example there should be a block comment that contains the"
" following parts:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:56
msgid "Reference example"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:57
msgid ""
"Each example should have a reference tag/key in the form ``.. "
"_ref_my_example:``. For instance:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:74
msgid ""
"The ``.. _ref_`` is necessary. Everything that follows is your reference "
"tag. As convention, we keep all references all in ``snake_case``."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:79
msgid "Example description"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:80
msgid ""
"This section should give a brief overview of what the example is about or "
"what it demonstrates. The title should be changed to reflect the topic that "
"your example covers. A well-structured example should be divided in several "
"parts. The following lists gives you an idea of this division:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:96
msgid "After this preamble is complete, the first code block begins."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:113
msgid "Your code goes here..."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:124
msgid "Basic text formatting"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:126
msgid "RST provides several ways to format text:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:128
msgid ""
"**Bold**: Use double asterisks `**` or double underscores `__` around the "
"text that you want to make bold. For example, `**my bold text**`."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:130
msgid ""
"*Italic*: Use single asterisks `*` or single underscores `_` around the text"
" that you want to italicize. For example, `_my italic text_`."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:132
msgid ""
"`Monospace`: Use single backticks \\` around the text that you want to "
"display in monospace font. For example, `\\`my monospace text\\``."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:139
msgid "Lists"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:141
msgid "RST supports both ordered and unordered lists:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:143
msgid "**Ordered List**:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:151
msgid "**Unordered List**:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:162
msgid "Equations and numbers"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:164
msgid "To include equations or numbers, you can use the following syntax:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:166
msgid "**Equations**:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:174
msgid "**Numbered Equations**:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:187
msgid "Code blocks"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:189
msgid ""
"To include code blocks in RST, use the double colons `::` followed by "
"indentation:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:199
msgid "This renders as:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:210
msgid "Section title"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:211
msgid ""
"Code blocks can be broken up with text \"sections\" which are interpreted as"
" restructured text."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:214
msgid ""
"This will also be translated into a markdown cell in the generated jupyter "
"notebook. Sections can contain any information you may have regarding the "
"example such as step-by-step comments or notes regarding motivations etc."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:218
msgid ""
"To create a title or a section, underline it with the appropriate "
"characters, such as``=``, ``*``, or ``~``. For example:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:241
msgid ""
"It does not matter which character you use, but you need to be consistent "
"through the whole document. For more information, see `RestructuredText "
"Primer <https://www.sphinx-"
"doc.org/en/master/usage/restructuredtext/basics.html#sections>`_ in the "
"Sphinx documentation."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:247
msgid ""
"As in Jupyter notebooks, if code is left unassigned at the end of a code "
"block (as with ``mapdl`` in the previous block), the output is generated and"
" printed to the screen according to its ``__repr__``. Otherwise, you can use"
" ``print()`` to output the ``__str__``."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:266
msgid "Plots and images"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:267
msgid ""
"If you use an mapdl plotting command the result will be auto-generated and "
"rendered in the page. Like so:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:281
msgid "Matplotlib plots are also rendered in HTML format."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:304
msgid ""
"Additionally you can reference images and figures using the ``image`` and "
"``figure`` directives:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:312
#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:446
#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:567
msgid "and"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:319
msgid ""
"More information can be found `image <https://www.sphinx-"
"doc.org/en/master/usage/restructuredtext/basics.html#images>`_. and `figure "
"<https://docutils.sourceforge.io/docs/ref/rst/directives.html#figure>`_"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:326
msgid "Making a pull request"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:327
msgid ""
"Once your example is complete and you've verified builds locally, you can "
"make a pull request (PR). Branches containing examples should be prefixed "
"with `doc/` as per the branch naming conventions found here: "
":ref:`contributing`."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:331
msgid ""
"Note that you only need to create the python source example (.py).  The "
"jupyter notebook, the example html and the demo script will all be auto-"
"generated via ``sphinx-gallery``."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:337
msgid "Stopping mapdl"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:338
msgid "This block of code should be included always."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:356
msgid ""
":download:`Download Jupyter notebook: 00-example-template.ipynb <00-example-"
"template.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:360
msgid ""
":download:`Download Python source code: 00-example-template.py <00-example-"
"template.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/00-example-template.rst:364
msgid ""
":download:`Download zipped: 00-example-template.zip <00-example-"
"template.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/01-smoothing-element-size-transitions.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_02-tips-n-"
"tricks_01-smoothing-element-size-transitions.py>` to download the full "
"example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/01-smoothing-element-size-transitions.rst:24
msgid "MAPDL Element Size Transition Example"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/01-smoothing-element-size-transitions.rst:26
msgid "This example shows you how to control the mesh density using PyMAPDL."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/01-smoothing-element-size-transitions.rst:28
msgid ""
"There are many cases in which you will want to control the density of the "
"mesh nearby a region of local high stresses (e.g. simulated crack, filleted "
"bracket, etc.). This usually introduces a sharp element size transition in "
"the mesh. This example demonstrates one way to reduce this effect using a "
"simple geometry."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/01-smoothing-element-size-transitions.rst:50
msgid "The Geometry (a box)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/01-smoothing-element-size-transitions.rst:51
msgid ""
"This example uses very simple geometry. In this case, a 3D box with 4 sides."
" The two remaining sides are open, and we have a rectangular tube. Its "
"dimensions are 5 x 5 x 1. We create this using 8 keypoints and then building"
" 4 areas."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/01-smoothing-element-size-transitions.rst:84
msgid "Mesh size"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/01-smoothing-element-size-transitions.rst:85
msgid ""
"We set the global mesh size to 0.7, but we're particularly interested in "
"face ``a2``, so we set the element size of that face to 0.1. Then we just "
"need to specify an element type (we use ``SHELL181`` here) and mesh our "
"geometry."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/01-smoothing-element-size-transitions.rst:89
msgid ""
"Additionally, we specify that we want triangular elements using ``mshape``. "
"This is purely to demonstrate the effect. This will work just as well for a "
"quadrilateral mesh."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/01-smoothing-element-size-transitions.rst:111
msgid "Smoothing the transition"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/01-smoothing-element-size-transitions.rst:112
msgid ""
"The mesh mostly looks fine, but we have quite a sharp transition in element "
"size along the edges of our focus area. This is likely undesirable because "
"these are corners and generally require a higher degree of accuracy. This is"
" simple to remedy, however."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/01-smoothing-element-size-transitions.rst:117
msgid ""
"To do this, we need to take the keypoints that bound a2 and set their "
"element size to be 0.1 as well. This sets all elements near those keypoints "
"to a size of 0.1 including elements not on ``a2`` itself. This spreads the "
"transition away from the edges."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/01-smoothing-element-size-transitions.rst:122
msgid ""
"To demonstrate this we first clear our existing mesh using aclear. Then we "
"use kesize to set the keypoint element sizes, and finally we remesh. The "
"results are self-evident."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/01-smoothing-element-size-transitions.rst:142
msgid "Smoothing the transition into a2"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/01-smoothing-element-size-transitions.rst:143
msgid ""
"Similarly, if we were happy to reduce the mesh size at the edges of ``a2``, "
"we could set the keypoint element sizes to be an intermediate value, which "
"would shift the main location of the size transition to within the face of "
"``a2``."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/01-smoothing-element-size-transitions.rst:182
msgid ""
":download:`Download Jupyter notebook: 01-smoothing-element-size-"
"transitions.ipynb <01-smoothing-element-size-transitions.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/01-smoothing-element-size-transitions.rst:186
msgid ""
":download:`Download Python source code: 01-smoothing-element-size-"
"transitions.py <01-smoothing-element-size-transitions.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/01-smoothing-element-size-transitions.rst:190
msgid ""
":download:`Download zipped: 01-smoothing-element-size-transitions.zip "
"<01-smoothing-element-size-transitions.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_02-tips-n-"
"tricks_03-using_inline_functions_and_Query.py>` to download the full example"
" code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:24
msgid "Using Inline Functions (Query)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:26
msgid "This example shows you how to use the inline functions in PyMAPDL."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:28
msgid ""
"Inline functions like ``UX`` have been implemented in PyMAPDL as methods on "
"the ``mapdl.inline_functions.Query`` object. In this example we set up a "
"simple simulation and use ``Query`` to demonstrate some of its "
"functionality."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:33
msgid ""
"First, get an instance of :class:`ansys.mapdl.core.inline_functions.Query` "
"below, using the ``mapdl`` property ``queries``."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:55
msgid "Setup Mesh"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:56
msgid "Assign element type ``SOLID5`` to element type 1"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:57
msgid "Create a cuboid ``mapdl.block`` 10 x 20 x 30 in dimension"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:58
msgid "Set element size to 2"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:59
msgid "Mesh the block"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:60
msgid "Plot the elements created"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:77
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:105
msgid "Setup Boundary Conditions"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:78
msgid "Assign an Elastic modulus in the x-direction to material 1 of 21e9"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:79
msgid "And a poisson's ratio of 0.3"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:80
msgid "Select all nodes at the ``z = 30`` end of the block"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:81
msgid "Remove all degrees of freedom for all nodes in the selection"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:82
msgid "Select all nodes at the ``z = 0`` end"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:83
msgid "Apply a x-direction force of 10000 to all of these"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:84
msgid "Finish preprocessing"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:106
msgid "Enter solution (``mapdl.slashsolu`` also works)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:107
msgid "Set the analysis type to ``STATIC``"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:108
#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:89
msgid "Select all nodes"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:110
msgid "Finish solution"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:128
msgid "Get the result from the ``mapdl`` instance"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:129
msgid ""
"Plot the equivalent stress results - Show the edges so that we can see the "
"element boundaries - Use the \"plasma\" colormap because it is perceptually "
"uniform"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:145
msgid "Using ``Query``"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:146
msgid "Use ``Query`` to get the nodes nearest to (5, 0, 0) and (5, 10, 0)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:147
msgid "Use the ``Query`` instance to examine the x, y, and z displacement."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:148
msgid "Print the results in a formatted string."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:197
msgid ""
":download:`Download Jupyter notebook: "
"03-using_inline_functions_and_Query.ipynb "
"<03-using_inline_functions_and_Query.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:201
msgid ""
":download:`Download Python source code: "
"03-using_inline_functions_and_Query.py "
"<03-using_inline_functions_and_Query.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/03-using_inline_functions_and_Query.rst:205
msgid ""
":download:`Download zipped: 03-using_inline_functions_and_Query.zip "
"<03-using_inline_functions_and_Query.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_02-tips-n-"
"tricks_04-rotational-displacement.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:24
msgid "Generating and Extracting Rotational Displacement"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:26
msgid ""
"In this example we show how to work with shells and rotation displacements."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:28
msgid ""
"Not all element types have rotational degrees of freedom, but generally, "
"\"shell\" ones do. In this example we create a square shell with thickness "
"of 0.1 and bend it, creating rotational displacement."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:32
msgid ""
"We subsequently plot the cumulative principal stresses and use "
":class:`ansys.mapdl.core.inline_functions.Query` to extract the exact values"
" of rotational displacement at the four corners of our square."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:52
msgid "Mesh Setup"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:53
msgid ""
"In this example we create a simple 2D square, 1 x 1 in dimension, and give "
"it the `'SHELL181'` element type because this type has rotational degrees of"
" freedom. Following this we:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:57
msgid "Give the material an elastic modulus of 2e5 (EX)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:58
msgid "Give the material a major poissons ratio of 0.3 (PRXY)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:59
msgid "Set the section type to 'SHELL'"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:60
msgid "Set the thickness to 0.1"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:61
msgid "Set the element size to 0.2"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:62
msgid "Mesh the square"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:63
msgid "Plot the mesh"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:84
msgid "Applying Boundary Conditions"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:85
msgid "Enter solution mode"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:86
msgid "Set analysis type to `'STATIC'`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:87
msgid "Remove all degrees of freedom for nodes at ``x = 0``"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:88
msgid "Apply a displacement of ``uz = -0.1`` at ``x = 1``"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:110
msgid "Plotting Stresses"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:111
msgid "Extract the results"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:112
msgid ""
"Plot the cumulative (0) equivalent stress (SEQV) - Set the colormap to "
"'plasma' because it is perceptually uniform - Show displacement so that we "
"can see any deformation"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:131
msgid "Extracting Rotational Displacements"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:132
msgid ""
"Get a :class:`ansys.mapdl.core.inline_functions.Query` instance from the "
"``queries`` property"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:134
msgid "Locate the nodes at the four corners of the square"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:135
msgid "Extract all 3 rotational displacement components for each one"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:136
msgid "Print them all"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:196
msgid ""
":download:`Download Jupyter notebook: 04-rotational-displacement.ipynb "
"<04-rotational-displacement.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:200
msgid ""
":download:`Download Python source code: 04-rotational-displacement.py "
"<04-rotational-displacement.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/04-rotational-displacement.rst:204
msgid ""
":download:`Download zipped: 04-rotational-displacement.zip <04-rotational-"
"displacement.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/05-explore_mapdl_files.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_02-tips-n-"
"tricks_05-explore_mapdl_files.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/05-explore_mapdl_files.rst:24
msgid "Binary MAPDL File Explorer"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/05-explore_mapdl_files.rst:26
msgid ""
"This tutorial will demonstrate how to explore the content of binary files "
"generated by a MAPDL Session and extract pertinent records."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/05-explore_mapdl_files.rst:29
msgid ""
"These files include most of the binary files generated by APDL (e.g. `.RST`,"
" `.FULL`, etc.)."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/05-explore_mapdl_files.rst:56
msgid "Open and explore a file"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/05-explore_mapdl_files.rst:57
msgid ""
"First you need to open an existing file.  We can create an example result "
"file by running a verification manual input file and then opening the result"
" file that it creates."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/05-explore_mapdl_files.rst:61
msgid "NOTE: for now only one file can be opened at a time"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/05-explore_mapdl_files.rst:75
msgid ""
"Using the `list` function, you can list the records available at the current"
" level."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/05-explore_mapdl_files.rst:89
msgid ""
"Using the `step` and `up` functions, you can go down into a specific branch "
"of the tree, or go up to the top level"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/05-explore_mapdl_files.rst:103
msgid "Display where you are in the tree or records:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/05-explore_mapdl_files.rst:116
msgid ""
"Go up one level to move back to the top and then list the records at the "
"current point."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/05-explore_mapdl_files.rst:131
msgid "Read a record into an APDLMath Vector"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/05-explore_mapdl_files.rst:132
msgid ""
"The `info` method will give you information about a record (e.g. length, "
"data type, etc.)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/05-explore_mapdl_files.rst:135
msgid ""
"Using the `read` method, you can read a specific record and fill an APDLMath"
" object."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/05-explore_mapdl_files.rst:151
msgid ""
"To get this vector into a NumPy array you need to explicitly use `asarray`:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/05-explore_mapdl_files.rst:165
msgid "Read the first nodal solution First we go into the first solution set"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/05-explore_mapdl_files.rst:180
msgid "Then we read the Nodal solution vector `\"NSL\"` into a numpy array"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/05-explore_mapdl_files.rst:195
msgid "Close an opened file"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/05-explore_mapdl_files.rst:226
msgid ""
":download:`Download Jupyter notebook: 05-explore_mapdl_files.ipynb "
"<05-explore_mapdl_files.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/05-explore_mapdl_files.rst:230
msgid ""
":download:`Download Python source code: 05-explore_mapdl_files.py "
"<05-explore_mapdl_files.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/05-explore_mapdl_files.rst:234
msgid ""
":download:`Download zipped: 05-explore_mapdl_files.zip "
"<05-explore_mapdl_files.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/06-convert-apdl-to-pymapdl.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_02-tips-n-"
"tricks_06-convert-apdl-to-pymapdl.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/06-convert-apdl-to-pymapdl.rst:25
msgid "Converting APDL scripts to PyMAPDL"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/06-convert-apdl-to-pymapdl.rst:27
msgid ""
"PyMAPDL offers two functions for converting APDL scripts to PyMAPDL scripts,"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/06-convert-apdl-to-pymapdl.rst:29
msgid "``convert_apdl_block()``, which works with strings"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/06-convert-apdl-to-pymapdl.rst:30
msgid "``convert_script()``, which works with files"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/06-convert-apdl-to-pymapdl.rst:32
msgid ""
"This example converts a modified version of the APDL verification example "
"45."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/06-convert-apdl-to-pymapdl.rst:96
msgid "Convert a string inline"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/06-convert-apdl-to-pymapdl.rst:97
msgid ""
"Calling the ``convert_apdl_block()`` function converts the supplied string "
"to a list of translated lines of code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/06-convert-apdl-to-pymapdl.rst:113
msgid "Quality of Life kwargs"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/06-convert-apdl-to-pymapdl.rst:114
msgid ""
"This function also includes several kwargs that cover common use cases when "
"converting from APDL to PyMAPDL, such as adding the necessary Python imports"
" when ``add_imports`` is set to ``True`` or adding the ``mapdl.exit()`` "
"command to the end when ``auto_exit`` is set to ``True``."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/06-convert-apdl-to-pymapdl.rst:119
msgid "Some of the most useful kwargs follow."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/06-convert-apdl-to-pymapdl.rst:121
msgid ""
"``only_commands``: Convert the commands without adding any boilerplate such "
"as ``mapdl=launch...`` or ``mapdl.exit``."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/06-convert-apdl-to-pymapdl.rst:122
msgid "``print_com``: Change ``/COM`` commands to ``print()`` commands."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/06-convert-apdl-to-pymapdl.rst:123
msgid ""
"``clear_at_start``: Call the ``mapdl.clear()`` method after the "
"`launch_mapdl`` function."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/06-convert-apdl-to-pymapdl.rst:124
msgid "``add_imports`` Add Python import lines at the start of the script."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/06-convert-apdl-to-pymapdl.rst:125
msgid ""
"``auto_exit``:  If ``True``, append the ``mapdl.exit()`` method to the end "
"of the file."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/06-convert-apdl-to-pymapdl.rst:126
msgid ""
"``cleanup_output``: If ``True``, format output using ``autopep8`` (if you "
"have this Python package installed)."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/06-convert-apdl-to-pymapdl.rst:143
msgid "Convert from a file"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/06-convert-apdl-to-pymapdl.rst:144
msgid ""
"The ``convert_script`` function provides all the same functionality but "
"converts from a file to a list of translated strings. Additionally, it "
"provides an option for saving the result to a file automatically, which the "
"``convert_apdl_block()`` function does not provide."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/06-convert-apdl-to-pymapdl.rst:168
msgid "Command-line interface"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/06-convert-apdl-to-pymapdl.rst:169
msgid ""
"You can access the ``convert_script`` function in the terminal using a CLI "
"(command-line interface). Assuming a virtual environment is activated, you "
"can use the following command to convert a file named ``mapdl.in`` to a "
"``mapdl.out`` file."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/06-convert-apdl-to-pymapdl.rst:178
msgid "You can even build the input on the fly using the ``echo`` command:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/06-convert-apdl-to-pymapdl.rst:196
msgid ""
":download:`Download Jupyter notebook: 06-convert-apdl-to-pymapdl.ipynb "
"<06-convert-apdl-to-pymapdl.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/06-convert-apdl-to-pymapdl.rst:200
msgid ""
":download:`Download Python source code: 06-convert-apdl-to-pymapdl.py "
"<06-convert-apdl-to-pymapdl.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/06-convert-apdl-to-pymapdl.rst:204
msgid ""
":download:`Download zipped: 06-convert-apdl-to-pymapdl.zip <06-convert-apdl-"
"to-pymapdl.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/index.rst:6
#: ../../pymapdl/doc/source/examples/index.rst:52
msgid "Miscellaneous examples"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/index.rst:7
#: ../../pymapdl/doc/source/examples/index.rst:57
msgid ""
"These examples demonstrate miscellaneous tips and tricks for using PyMAPDL."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/index.rst:26
msgid ""
":ref:`sphx_glr_examples_gallery_examples_02-tips-n-tricks_00-example-"
"template.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_02-tips-n-tricks_00-example-"
"template.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/index.rst:43
msgid ""
":ref:`sphx_glr_examples_gallery_examples_02-tips-n-tricks_01-smoothing-"
"element-size-transitions.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_02-tips-n-tricks_01-smoothing-"
"element-size-transitions.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/index.rst:60
msgid ""
":ref:`sphx_glr_examples_gallery_examples_02-tips-n-"
"tricks_03-using_inline_functions_and_Query.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_02-tips-n-"
"tricks_03-using_inline_functions_and_Query.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/index.rst:77
msgid ""
":ref:`sphx_glr_examples_gallery_examples_02-tips-n-tricks_04-rotational-"
"displacement.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_02-tips-n-tricks_04-rotational-"
"displacement.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/index.rst:94
msgid ""
":ref:`sphx_glr_examples_gallery_examples_02-tips-n-"
"tricks_05-explore_mapdl_files.py`"
msgstr ""
":ref:`sphx_glr_examples_gallery_examples_02-tips-n-"
"tricks_05-explore_mapdl_files.py`"

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/index.rst:111
msgid ""
":ref:`sphx_glr_examples_gallery_examples_02-tips-n-tricks_06-convert-apdl-"
"to-pymapdl.py`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/sg_execution_times.rst:9
msgid ""
"**00:00.000** total execution time for 6 files **from "
"examples/gallery_examples/02-tips-n-tricks**:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/sg_execution_times.rst:35
msgid ""
":ref:`sphx_glr_examples_gallery_examples_02-tips-n-tricks_00-example-"
"template.py` (``00-example-template.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/sg_execution_times.rst:38
msgid ""
":ref:`sphx_glr_examples_gallery_examples_02-tips-n-tricks_01-smoothing-"
"element-size-transitions.py` (``01-smoothing-element-size-transitions.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/sg_execution_times.rst:41
msgid ""
":ref:`sphx_glr_examples_gallery_examples_02-tips-n-"
"tricks_03-using_inline_functions_and_Query.py` "
"(``03-using_inline_functions_and_Query.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/sg_execution_times.rst:44
msgid ""
":ref:`sphx_glr_examples_gallery_examples_02-tips-n-tricks_04-rotational-"
"displacement.py` (``04-rotational-displacement.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/sg_execution_times.rst:47
msgid ""
":ref:`sphx_glr_examples_gallery_examples_02-tips-n-"
"tricks_05-explore_mapdl_files.py` (``05-explore_mapdl_files.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/02-tips-n-tricks/sg_execution_times.rst:50
msgid ""
":ref:`sphx_glr_examples_gallery_examples_02-tips-n-tricks_06-convert-apdl-"
"to-pymapdl.py` (``06-convert-apdl-to-pymapdl.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_gallery_examples_03-general-"
"fea_00-how_finite_element_works.py>` to download the full example code."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:24
msgid "Build a Finite Element Model"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:26
msgid ""
"A finite element machinery built for a quadrilateral element using an "
"isoparametric formulation and validated with PyMAPDL."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:29
msgid ""
"To illustrate it with a concrete example, we take a 2D element described by "
"the following (x, y) node locations, an isotropic material (Young's modulus "
"of 30e6 psi and Poission's ratio of 0.25) and unit thickness, providing a "
"live implementation of the discussions in Daryl Logan's A First Course in "
"the Finite Element Method (2nd Ed., PWS Publishing 1993)."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:51
msgid "Deriving the stiffness matrix for a 2D linear rectangular element"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:52
msgid "Build a basic 2D element with the following coordinates:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:54
msgid ""
"\\begin{matrix}\n"
"(1, 2) \\\\ (8, 0) \\\\ (9, 4) \\\\ (4, 5)\n"
"\\end{matrix}"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:94
msgid ""
"We will create an element class ``MyElementDemo`` to carry all the data and "
"methods necessary for this demonstration.  Although we could program the "
"whole class at once (as done at the bottom of this exercise), we will add "
"data and methods piecemeal so we can comment on their meaning.  We will "
"create an instance of this class that we'll call ``my_elem`` to represent "
"our specific element example"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:118
msgid "Shape Functions"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:119
msgid ""
"Element shape functions allow us to interpolate some quantity, e.g., a "
"component of displacement, from the corner nodes to any point throughout the"
" element.  That way, as the structure deforms, we will know not only the "
"displacement at the nodes but also the displacements for any point within."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:124
msgid ""
"What's special for an isoparametric formulation is to select a canonical "
"shape for our 2D element.  We assume that any 2D quadrilateral can be mapped"
" to a regular square, for example a domain in :math:`{\\rm I\\!R}^2` such as"
" :math:`s \\in [-1,1]` and :math:`t\\in [-1,1]`.  We derive all of our "
"physical quantities on that square and use the mapping to transform their "
"values for the actual shapes of our elements.  This transformation will help"
" simplify the calculation of integrals necessary for measuring how strain "
"energy accumulates throughout the continuum of the element as the discrete "
"nodes move and deform the shape."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:134
msgid ""
"For an isoparametric 2D element, we define 4 shape functions as follows:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:136
msgid ""
"\\begin{matrix}\n"
"N_1 = \\frac{(1-s)\\cdot(1-t)}{4} \\\\\n"
"N_2 = \\frac{(1+s)\\cdot(1-t)}{4} \\\\\n"
"N_3 = \\frac{(1+s)\\cdot(1+t)}{4} \\\\\n"
"N_4 = \\frac{(1-s)\\cdot(1+t)}{4}\n"
"\\end{matrix}"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:145
msgid ""
"These functions are built in such a way that the function at node :math:`i` "
"vanishes at all other nodes and their sum is 1 at all points in the domain."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:148
msgid ""
"For fun, let's plot them to see what each of them contributes to the "
"interpolation of the element"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:186
msgid "Let's add the shape function method to our class"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:211
msgid ""
"To interpolate a quantity, e.g., position, from the nodes to arbitrary "
"points throughout the element we use the following operation."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:215
msgid ""
"\\begin{bmatrix}\n"
"x \\\\ y \\end{bmatrix} =\n"
"\\begin{bmatrix}\n"
"N_{1}(s, t) & 0 & N_{2}(s, t) & 0 & N_{3}(s, t) & 0 & N_{4}(s, t) & 0 \\\\\n"
"0 & N_{1}(s, t) & 0 & N_{2}(s, t) & 0 & N_{3}(s, t) & 0 & N_{4}(s, t)\n"
"\\end{bmatrix} \\cdot\n"
"\\begin{bmatrix}\n"
"{}^1x \\\\ {}^1y \\\\ {}^2x \\\\ {}^2y \\\\ {}^3x \\\\ {}^3y \\\\ {}^4x \\\\ {}^4y\n"
"\\end{bmatrix}"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:227
msgid "\\mathbf{X}_{\\text{throughout}} = \\mathbf{N} \\cdot \\mathbf{X}_{\\text{nodal}}"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:253
msgid ""
"To see how this is useful, let's interpolate some common points. The "
"centroid of our isoparametric element was :math:`(s,t) = (0, 0)`.  Let's see"
" how the interpolation obtains the equivalent point in our real element:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:276
msgid "Plotting the mesh."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:289
msgid "Gauss Quadrature"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:291
msgid ""
"Gauss Quadrature is a method for approximating the integral of a function "
":math:`\\int f(x) dx` by a finite sum :math:`\\sum w_i f(x_i)`.  By sampling"
" the function :math:`f(x)` at a finite number of locations in the domain and"
" properly scaling their values, it is possible to obtain an estimate of the "
"integral.  It turns out there are optimal locations for the sampling points "
":math:`x_i` and their weight values :math:`w_i`.  For a 2D function in the "
"domain of our isoparametric element, i.e., :math:`(s,t) \\in {\\rm I\\!R}^2`"
" with :math:`s \\in [-1,1]` and :math:`t\\in [-1,1]`, the optimal locations "
"for 4 point-integration are:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:317
msgid "Their locations in the element of interest"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:337
msgid "Strain calculation"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:338
msgid ""
"Strain is related to displacement by a linear differential operator.  For "
"2D, we consider only its in-plain components:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:341
msgid ""
"\\mathbf{\\varepsilon} =\n"
"\\begin{bmatrix}\n"
"\\varepsilon_x \\\\ \\varepsilon_y \\\\ \\gamma_{xy}\n"
"\\end{bmatrix}\n"
"=\n"
"\\begin{bmatrix}\n"
"\\frac{\\partial u_x}{\\partial x} \\\\ \\frac{\\partial u_y}{\\partial y} \\\\\n"
"\\frac{\\partial u_x}{\\partial y} + \\frac{\\partial u_y}{\\partial x}\n"
"\\end{bmatrix}"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:353
msgid "and infer the operator as follows:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:355
msgid ""
"\\begin{bmatrix}\n"
"\\varepsilon_x \\\\ \\varepsilon_y \\\\ \\gamma_{xy}\n"
"\\end{bmatrix}\n"
"=\n"
"\\begin{bmatrix}\n"
"\\frac{\\partial \\left( ... \\right)}{\\partial x} & 0 \\\\\n"
"0 & \\frac{\\partial \\left( ... \\right)}{\\partial y} \\\\\n"
"\\frac{\\partial \\left( ... \\right)}{\\partial y} & \\frac{\\partial \\left( ... \\right)}{\\partial x}\n"
"\\end{bmatrix} \\cdot\n"
"\\begin{bmatrix}\n"
"u_x \\\\ u_y\n"
"\\end{bmatrix}"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:373
msgid ""
"We recall the displacements :math:`\\begin{bmatrix}u_x & "
"u_y\\end{bmatrix}^T` are known throughout the element thanks to the shape "
"functions.  Thus"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:377
msgid ""
"\\begin{bmatrix}\n"
"u_x \\\\ u_y \\end{bmatrix} =\n"
"\\begin{bmatrix}\n"
"N_{1}(s, t) & 0 & N_{2}(s, t) & 0 & N_{3}(s, t) & 0 & N_{4}(s, t) & 0 \\\\\n"
"0 & N_{1}(s, t) & 0 & N_{2}(s, t) & 0 & N_{3}(s, t) & 0 & N_{4}(s, t)\n"
"\\end{bmatrix} \\cdot\n"
"\\begin{bmatrix}\n"
"{}^1u_x \\\\ {}^1u_y \\\\ {}^2u_x \\\\ {}^2u_y \\\\ {}^3u_x \\\\ {}^3u_y \\\\ {}^4u_x \\\\ {}^4u_y\n"
"\\end{bmatrix}"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:389
msgid "\\mathbf{u}_{\\text{throughout}} = \\mathbf{N} \\cdot \\mathbf{u}_{\\text{nodal}}"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:395
msgid ""
"To incorporate the shape functions into the expressions of strain above we "
"need to replace the differential operator relative to :math:`x` and "
":math:`y` with its equivalent expressed in terms of :math:`s` and :math:`t`."
"  This requires the chain rule, which in multivariate calculus is "
"facilitated with a Jacobian matrix (and its determinant):"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:402
msgid ""
"\\begin{bmatrix}\n"
"\\varepsilon_x \\\\ \\varepsilon_y \\\\ \\gamma_{xy}\n"
"\\end{bmatrix}\n"
"=\n"
"\\frac{1}{\\det{\\mathbf{J}}} \\begin{bmatrix}\n"
"\\frac{\\partial y}{\\partial t} \\frac{\\partial \\left( ... \\right)}{\\partial s} - \\frac{\\partial y}{\\partial s} \\frac{\\partial \\left( ... \\right)}{\\partial t} & 0 \\\\\n"
"0 & \\frac{\\partial x}{\\partial s} \\frac{\\partial \\left( ... \\right)}{\\partial t} - \\frac{\\partial x}{\\partial t} \\frac{\\partial \\left( ... \\right)}{\\partial s} \\\\\n"
"\\frac{\\partial x}{\\partial s} \\frac{\\partial \\left( ... \\right)}{\\partial t} - \\frac{\\partial x}{\\partial t} \\frac{\\partial \\left( ... \\right)}{\\partial s} & \\frac{\\partial y}{\\partial t} \\frac{\\partial \\left( ... \\right)}{\\partial s} - \\frac{\\partial y}{\\partial s} \\frac{\\partial \\left( ... \\right)}{\\partial t}\n"
"\\end{bmatrix} \\cdot\n"
"\\begin{bmatrix}\n"
"u_x \\\\ u_y\n"
"\\end{bmatrix}"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:418
msgid ""
"\\mathbf{\\varepsilon} =\n"
"\\mathbf{D} \\cdot \\mathbf{u_{\\text{throughout}}}"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:423
msgid "Therefore:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:425
msgid ""
"\\begin{bmatrix}\n"
"\\varepsilon_x \\\\ \\varepsilon_y \\\\ \\gamma_{xy}\n"
"\\end{bmatrix}\n"
"=\n"
"\\mathbf{D} \\cdot \\mathbf{N} \\cdot \\mathbf{u_{\\text{nodal}}}\n"
"=\n"
"\\mathbf{B} \\cdot  \\mathbf{u_{\\text{nodal}}}"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:435
#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:556
msgid "where"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:437
msgid ""
"\\mathbf{D}=\n"
"\\frac{1}{\\det{\\mathbf{J}}} \\begin{bmatrix}\n"
"\\frac{\\partial y}{\\partial t} \\frac{\\partial \\left( ... \\right)}{\\partial s} - \\frac{\\partial y}{\\partial s} \\frac{\\partial \\left( ... \\right)}{\\partial t} & 0 \\\\\n"
"0 & \\frac{\\partial x}{\\partial s} \\frac{\\partial \\left( ... \\right)}{\\partial t} - \\frac{\\partial x}{\\partial t} \\frac{\\partial \\left( ... \\right)}{\\partial s} \\\\\n"
"\\frac{\\partial x}{\\partial s} \\frac{\\partial \\left( ... \\right)}{\\partial t} - \\frac{\\partial x}{\\partial t} \\frac{\\partial \\left( ... \\right)}{\\partial s} & \\frac{\\partial y}{\\partial t} \\frac{\\partial \\left( ... \\right)}{\\partial s} - \\frac{\\partial y}{\\partial s} \\frac{\\partial \\left( ... \\right)}{\\partial t}\n"
"\\end{bmatrix}"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:448
msgid ""
"\\mathbf{J}=\n"
"\\begin{bmatrix}\n"
"\\frac{\\partial x}{\\partial s} & \\frac{\\partial y}{\\partial s} \\\\\n"
"\\frac{\\partial x}{\\partial t} & \\frac{\\partial y}{\\partial t}\n"
"\\end{bmatrix}"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:459
msgid "Implementation: Jacobians"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:461
msgid ""
"The Jacobian can be obtained by substituting the expressions for positions "
":math:`x` and :math:`y` throughout as a function of the nodal locations with"
" the help of the shape functions.  It turns out to be equivalent to the "
"following bilinear form:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:466
msgid ""
"\\begin{aligned}\n"
"\\det{\\mathbf{J}} &=\n"
"\\frac{1}{8}\n"
"\\begin{bmatrix}{}^1x & {}^2x & {}^3x & {}^4x \\end{bmatrix} \\cdot\n"
"\\begin{bmatrix}\n"
"0 & 1 - t & t-s & s-1 \\\\\n"
"t-1 & 0 & s+1 & -s-t \\\\\n"
"s-t & -s-1 & 0 & t+1 \\\\\n"
"1-s & s+t & -t-1 & 0 \\\\\n"
"\\end{bmatrix} \\cdot\n"
"\\begin{bmatrix}{}^1y \\\\ {}^2y \\\\ {}^3y \\\\ {}^4y \\end{bmatrix}\n"
"\\\\&=\n"
"\\mathbf{X_{\\text{locs}}}^T \\cdot\n"
"\\begin{bmatrix}\n"
"0 & 1 - t & t-s & s-1 \\\\\n"
"t-1 & 0 & s+1 & -s-t \\\\\n"
"s-t & -s-1 & 0 & t+1 \\\\\n"
"1-s & s+t & -t-1 & 0 \\\\\n"
"\\end{bmatrix} \\cdot\n"
"\\mathbf{Y_{\\text{locs}}}\n"
"\\end{aligned}"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:492
msgid "We are now ready to implement it into our element"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:520
msgid ""
"Next, we investigate how the Jacobians vary within the element. First for "
"our subject element:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:535
msgid "Implementation: B Matrix"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:536
msgid ""
"Similarly, we can implement our expression for the B matrix, which converts "
"nodal displacements :math:`\\mathbf{u_{\\text{nodal}}}` to strains "
":math:`\\mathbf{\\varepsilon}`, by substituting the D operator, the shape "
"functions and nodal locations:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:541
msgid ""
"\\begin{bmatrix}\n"
"\\varepsilon_x \\\\ \\varepsilon_y \\\\ \\gamma_{xy}\n"
"\\end{bmatrix}\n"
"=\n"
"\\mathbf{B} \\cdot  \\mathbf{u_{\\text{nodal}}}"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:549
msgid ""
"\\mathbf{B} = \\frac{1}{\\det{\\mathbf{J}}}\n"
"\\begin{bmatrix}\n"
"\\mathbf{B_1} & \\mathbf{B_2} & \\mathbf{B_3} & \\mathbf{B_4}\n"
"\\end{bmatrix}"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:558
msgid ""
"\\mathbf{B_i} =\n"
"\\begin{bmatrix}\n"
"a \\frac{\\partial N_i}{\\partial s} - b \\frac{\\partial N_i}{\\partial t} & 0 \\\\\n"
"0 & c \\frac{\\partial N_i}{\\partial t} - d \\frac{\\partial N_i}{\\partial s} \\\\\n"
"c \\frac{\\partial N_i}{\\partial t} - d \\frac{\\partial N_i}{\\partial s} & a \\frac{\\partial N_i}{\\partial s} - b \\frac{\\partial N_i}{\\partial t}\n"
"\\end{bmatrix}"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:569
msgid ""
"\\begin{bmatrix}\n"
"d & c\\\\\n"
"a & b\n"
"\\end{bmatrix}=\n"
"\\frac{1}{4}\n"
"\\begin{bmatrix} \\mathbf{X_{\\text{locs}}}^T \\\\ \\mathbf{Y_{\\text{locs}}}^T \\end{bmatrix}  \\cdot\n"
"\\begin{bmatrix} \\mathbf{S} & \\mathbf{T} \\end{bmatrix}"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:579
msgid "for"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:581
msgid "\\mathbf{S} = \\begin{bmatrix} s - 1 \\\\ -(s+1) \\\\ s+1 \\\\ -(s-1) \\end{bmatrix}"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:585
msgid "\\mathbf{T} = \\begin{bmatrix} t - 1 \\\\ -(t-1) \\\\ t+1 \\\\ -(s+1) \\end{bmatrix}"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:636
msgid "Stress Calculation"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:637
msgid ""
"The leap from strains to stresses involves the constitutive model, i.e., the"
" material properties.  This demo assumes a very simple case, i.e., a linear "
"isotropic material which converts strains to stresses according to the "
"following matrix:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:642
msgid ""
"\\mathbf{\\sigma}\n"
"=\n"
"\\mathbf{C} \\cdot \\mathbf{\\varepsilon}"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:648
msgid ""
"\\begin{bmatrix}\n"
"\\sigma_x \\\\ \\sigma_y \\\\ \\tau_{xy}\n"
"\\end{bmatrix}\n"
"=\n"
"\\begin{bmatrix}\n"
"1 & \\nu & 0 \\\\\n"
"\\nu & 1 & 0 \\\\\n"
"0 & 0 & 1\n"
"\\end{bmatrix}\n"
"\\begin{bmatrix}\n"
"\\varepsilon_x \\\\ \\varepsilon_y \\\\ \\gamma_{xy}\n"
"\\end{bmatrix}"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:688
msgid "Stiffness Calculation"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:690
msgid ""
"The total energy of a system :math:`E`, comprising an element on which nodal"
" forces :math:`\\mathbf{F}_{\\text{nodal}}` are applied and undergoes nodal "
"deformation :math:`\\mathbf{u}_{\\text{nodal}}` is:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:694
msgid ""
"E = - \\mathbf{F}_{\\text{nodal}} \\cdot \\mathbf{u}_{\\text{nodal}} + "
"\\frac{1}{2} \\iiint_V{} \\mathbf{\\varepsilon}^T \\cdot \\mathbf{\\sigma} "
"\\,dV"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:699
msgid ""
"The first term stems from the work by the force at the nodes while the "
"second measures the strain energy density accumulated throughout the element"
" volume as it deforms."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:703
msgid ""
"As we saw, both stress and strain relate back to the nodal displacements "
"through the B (courtesy of the shape functions), i.e., "
":math:`\\mathbf{\\varepsilon} = \\mathbf{B} \\cdot "
"\\mathbf{u}_{\\text{nodal}}` and :math:`\\mathbf{\\sigma} = \\mathbf{C} "
"\\cdot \\mathbf{B} \\cdot \\mathbf{u}_{\\text{nodal}}` thus:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:710
msgid ""
"E = -\\mathbf{F}_{\\text{nodal}} \\cdot \\mathbf{u}_{\\text{nodal}} + "
"\\frac{1}{2} \\iiint_V{} \\mathbf{u}_{\\text{nodal}}^T \\cdot \\mathbf{B}^T "
"\\cdot \\mathbf{C} \\cdot \\mathbf{B} \\cdot \\mathbf{u}_{\\text{nodal}} "
"\\,dV"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:716
msgid ""
"Our assumed linear shape functions are not as rich as the true functions "
"governing the actual deformation of the structure in real life.  Imagine a "
"Taylor expansion: our linear shape function captures up to the first "
"polynomial term, whereas the true shape function could have arbitrarily many"
" beyond that. One way this shows up is in the total energy of our system. "
"When constrained to use our limited fidelity shape functions the system will"
" accumulate a higher total energy than that of the true solution it is meant"
" to approximate.  To seek the best approximation, it makes sense to find a "
"minimum of this total energy relative to the possible solutions, i.e., nodal"
" displacements :math:`\\mathbf{u}_{\\text{nodal}}`.  Loyal to our calculus "
"roots, we look for the minimum by taking the corresponding partial "
"derivative:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:729
msgid ""
"\\frac{\\partial E}{\\partial \\mathbf{u}_{\\text{nodal}}} = "
"-\\mathbf{F}_{\\text{nodal}} + \\frac{1}{2} \\iiint_V{} \\mathbf{B}^T \\cdot"
" \\mathbf{C} \\cdot \\mathbf{B} \\cdot \\mathbf{u}_{\\text{nodal}} \\,dV =0"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:733
msgid ""
"\\mathbf{F}_{\\text{nodal}}  = \\frac{1}{2} \\iiint_V{} \\mathbf{B}^T \\cdot"
" \\mathbf{C} \\cdot \\mathbf{B} \\cdot \\mathbf{u}_{\\text{nodal}} \\,dV = "
"\\mathbf{K} \\cdot \\mathbf{u}_{\\text{nodal}}"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:737
msgid "Thus, we've unlocked the Hooke's law stiffness hidden in the integral:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:739
msgid "\\mathbf{K} = \\iiint_V{} \\mathbf{B}^T \\cdot \\mathbf{C} \\cdot \\mathbf{B} \\,dV"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:745
msgid ""
"For our planar element, assumed to have constant thickness :math:`h` and "
"area :math:`A`:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:748
msgid ""
"\\mathbf{K} = h \\iint_A{} \\mathbf{B}^T \\cdot \\mathbf{C} \\cdot "
"\\mathbf{B} \\,dA=h \\iint_A{} \\mathbf{B}^T \\cdot \\mathbf{C} \\cdot "
"\\mathbf{B}   \\,dx \\,dy = h \\iint_A{} \\mathbf{B}^T \\cdot \\mathbf{C} "
"\\cdot \\mathbf{B} \\cdot \\det(\\mathbf{J})  \\,ds \\,dt"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:752
msgid ""
"And the integral can be approximated by Gaussian quadrature through a "
"weighted sum with the optimal sampling points for :math:`\\mathbf{B}`:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:754
msgid ""
"\\mathbf{K}\\approx\n"
"h \\sum_{(s,t) \\in \\text{Gauss}} w(s,t) \\cdot \\mathbf{B}^T(s,t) \\cdot \\mathbf{C} \\cdot \\mathbf{B}(s,t) \\cdot \\det(\\mathbf{J}(s,t))"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:759
msgid ""
"Thus the use of an isoparametric formulation allowed us to make this "
"integration easy, since the domain of integration is constant, regardless of"
" the shape of the 2D quadrilateral at hand."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:807
msgid "Putting it all together"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:808
msgid "Creating `Elem2D` class."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:911
msgid "Isotropic class definition"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:936
msgid "Applying the created classes."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:956
msgid "Element in PyMAPDL"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:957
msgid "Now let's obtain the same stiffness matrix from MAPDL"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:959
msgid "launch PyMAPDL"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:975
msgid ""
"Create a use a 2-D 4-Node Structural Solid element with matching material "
"properties."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:994
msgid "Create the nodes at the same locations as above."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:1008
msgid "Setup our element with the corresponding material properties."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:1021
msgid "Setup the static analysis."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:1035
msgid ""
"Solve and permit one degree of freedom of each mode to be free per solution."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:1054
msgid "The columns of the stiffness matrix appear as nodal force reactions"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:1077
msgid "Now, apply this to the whole matrix and output it."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:1093
msgid ""
"Which is identical to the stiffness matrix obtained from our academic "
"formulation."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:1107
msgid "Show that the stiffness matrix in MAPDL matches what we derived."
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:1140
msgid ""
":download:`Download Jupyter notebook: 00-how_finite_element_works.ipynb "
"<00-how_finite_element_works.ipynb>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:1144
msgid ""
":download:`Download Python source code: 00-how_finite_element_works.py "
"<00-how_finite_element_works.py>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/00-how_finite_element_works.rst:1148
msgid ""
":download:`Download zipped: 00-how_finite_element_works.zip "
"<00-how_finite_element_works.zip>`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/index.rst:6
#: ../../pymapdl/doc/source/examples/index.rst:60
msgid "Academic finite element examples"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/index.rst:7
msgid ""
"These examples demonstrate finite element method as applicable to Python and"
" MAPDL while emphasising Python libraries such as `matplotlib "
"<https://matplotlib.org/>`_"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/index.rst:28
msgid ""
":ref:`sphx_glr_examples_gallery_examples_03-general-"
"fea_00-how_finite_element_works.py`"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/sg_execution_times.rst:9
msgid ""
"**00:00.000** total execution time for 1 file **from "
"examples/gallery_examples/03-general-fea**:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/03-general-fea/sg_execution_times.rst:35
msgid ""
":ref:`sphx_glr_examples_gallery_examples_03-general-"
"fea_00-how_finite_element_works.py` (``00-how_finite_element_works.py``)"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/sg_execution_times.rst:9
msgid ""
"**00:00.000** total execution time for 0 files **from "
"examples/gallery_examples**:"
msgstr ""

#: ../../pymapdl/doc/source/examples/gallery_examples/sg_execution_times.rst:35
#: ../../pymapdl/doc/source/examples/gallery_examples/sg_execution_times.rst:36
#: ../../pymapdl/doc/source/examples/gallery_examples/sg_execution_times.rst:37
msgid "N/A"
msgstr ""

#: ../../pymapdl/doc/source/examples/index.rst:3
msgid "Verification Manual"
msgstr ""

#: ../../pymapdl/doc/source/examples/index.rst:3
#: ../../pymapdl/doc/source/examples/index.rst:81
msgid "Technology Showcases"
msgstr ""

#: ../../pymapdl/doc/source/examples/index.rst:21
msgid "Examples"
msgstr "使用例"

#: ../../pymapdl/doc/source/examples/index.rst:24
msgid ""
"Here are a series of examples using MAPDL with the ``ansys-mapdl-core`` "
"library."
msgstr ""

#: ../../pymapdl/doc/source/examples/index.rst:50
msgid "These extended examples explain advanced concepts."
msgstr ""

#: ../../pymapdl/doc/source/examples/index.rst:65
msgid "Demonstrate finite element method for academic and teaching purposes."
msgstr ""

#: ../../pymapdl/doc/source/examples/index.rst:67
msgid "Developer portal examples"
msgstr ""

#: ../../pymapdl/doc/source/examples/index.rst:72
msgid ""
"Informative and insightful blog articles published in the `Developer Portal "
"<developer_portal_>`_."
msgstr ""

#: ../../pymapdl/doc/source/examples/index.rst:74
msgid "Verification manual examples"
msgstr ""

#: ../../pymapdl/doc/source/examples/index.rst:78
msgid ""
"Demonstrates a range of Mechanical APDL elements and capabilities using "
"PyMAPDL."
msgstr ""

#: ../../pymapdl/doc/source/examples/index.rst:85
msgid "Examples coming from the APDL Technology Showcase Manual."
msgstr ""

#: ../../pymapdl/doc/source/examples/index.rst:94
msgid "Download example files"
msgstr ""

#: ../../pymapdl/doc/source/examples/index.rst:96
msgid ""
"Each example should contain all the necessary resources to run the example. "
"However in some cases, external files are needed. A link to those files is "
"available at each example page. These links refers to the following GitHub "
"repository where you can find all of them:"
msgstr ""

#: ../../pymapdl/doc/source/examples/index.rst:101
msgid "`GitHub Example Data Repository <example_data_repo_>`_"
msgstr ""

#: ../../pymapdl/doc/source/examples/index.rst:103
msgid ""
"If you find a missing or broken link, open an issue in GitHub (`PyMAPDL "
"Issues <pymapdl_issues_>`_)."
msgstr ""
